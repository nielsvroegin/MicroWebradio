

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Tue Sep 29 22:06:00 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           	psect	idataCOMRAM
    49  001134                     __pidataCOMRAM:
    50                           	opt stack 0
    51                           
    52                           ;initializer for _receiveBuffer
    53  001134  B2                 	db	low _receiveBuffer_space
    54  001135  00                 	db	high _receiveBuffer_space
    55  001136  00                 	db	0
    56  001137  00                 	db	0
    57  001138  20                 	db	32
    58  0000                     _LATAbits	set	3977
    59  0000                     _RCREG	set	4014
    60  0000                     _SPBRG	set	4015
    61  0000                     _TRISAbits	set	3986
    62  0000                     _TXREG	set	4013
    63  0000                     _BRG16	set	32195
    64  0000                     _BRGH	set	32098
    65  0000                     _CREN	set	32092
    66  0000                     _FERR	set	32090
    67  0000                     _GIE	set	32663
    68  0000                     _OERR	set	32089
    69  0000                     _PEIE	set	32662
    70  0000                     _RCIE	set	31981
    71  0000                     _RCIF	set	31989
    72  0000                     _RX9	set	32094
    73  0000                     _SPEN	set	32095
    74  0000                     _SREN	set	32093
    75  0000                     _SYNC	set	32100
    76  0000                     _TRISC6	set	31910
    77  0000                     _TRISC7	set	31911
    78  0000                     _TX9	set	32102
    79  0000                     _TXEN	set	32101
    80  0000                     _TXIE	set	31980
    81  0000                     _TXIF	set	31988
    82                           
    83                           	psect	smallconst
    84  000600                     __psmallconst:
    85                           	opt stack 0
    86  000600  00                 	db	0
    87  000601                     STR_3:
    88  000601  2B                 	db	43
    89  000602  43                 	db	67	;'C'
    90  000603  57                 	db	87	;'W'
    91  000604  4C                 	db	76	;'L'
    92  000605  41                 	db	65	;'A'
    93  000606  50                 	db	80	;'P'
    94  000607  3A                 	db	58	;':'
    95  000608  28                 	db	40
    96  000609  00                 	db	0
    97  00060A                     STR_2:
    98  00060A  41                 	db	65	;'A'
    99  00060B  54                 	db	84	;'T'
   100  00060C  2B                 	db	43
   101  00060D  43                 	db	67	;'C'
   102  00060E  57                 	db	87	;'W'
   103  00060F  4C                 	db	76	;'L'
   104  000610  41                 	db	65	;'A'
   105  000611  50                 	db	80	;'P'
   106  000612  00                 	db	0
   107  000613                     STR_8:
   108  000613  45                 	db	69	;'E'
   109  000614  52                 	db	82	;'R'
   110  000615  52                 	db	82	;'R'
   111  000616  4F                 	db	79	;'O'
   112  000617  52                 	db	82	;'R'
   113  000618  00                 	db	0
   114  000619                     STR_5:
   115  000619  2C                 	db	44
   116  00061A  22                 	db	34
   117  00061B  00                 	db	0
   118  00061C                     STR_7:
   119  00061C  4F                 	db	79	;'O'
   120  00061D  4B                 	db	75	;'K'
   121  00061E  00                 	db	0
   122  00061F                     STR_1:
   123  00061F  41                 	db	65	;'A'
   124  000620  54                 	db	84	;'T'
   125  000621  00                 	db	0
   126  000622                     STR_4:
   127  000622  2C                 	db	44
   128  000623  00                 	db	0
   129  0000                     
   130                           ; #config settings
   131  000624  00                 	db	0	; dummy byte at the end
   132  0000                     
   133                           	psect	cinit
   134  000E76                     __pcinit:
   135                           	opt stack 0
   136  000E76                     start_initialization:
   137                           	opt stack 0
   138  000E76                     __initialization:
   139                           	opt stack 0
   140                           
   141                           ; Clear objects allocated to BIGRAM (340 bytes)
   142  000E76  EE00  F0D2         	lfsr	0,__pbssBIGRAM
   143  000E7A  EE11 F054          	lfsr	1,340
   144  000E7E                     clear_0:
   145  000E7E  6AEE               	clrf	postinc0,c
   146  000E80  50E5               	movf	postdec1,w,c
   147  000E82  50E1               	movf	fsr1l,w,c
   148  000E84  E1FC               	bnz	clear_0
   149  000E86  50E2               	movf	fsr1h,w,c
   150  000E88  E1FA               	bnz	clear_0
   151                           
   152                           ; Clear objects allocated to BANK0 (32 bytes)
   153  000E8A  EE00  F0B2         	lfsr	0,__pbssBANK0
   154  000E8E  0E20               	movlw	32
   155  000E90                     clear_1:
   156  000E90  6AEE               	clrf	postinc0,c
   157  000E92  06E8               	decf	wreg,f,c
   158  000E94  E1FD               	bnz	clear_1
   159                           
   160                           ; Clear objects allocated to COMRAM (3 bytes)
   161  000E96  6A3E               	clrf	(__pbssCOMRAM+2)& (0+255),c
   162  000E98  6A3D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   163  000E9A  6A3C               	clrf	__pbssCOMRAM& (0+255),c
   164                           
   165                           ; Initialize objects allocated to COMRAM (5 bytes)
   166                           ; load TBLPTR registers with __pidataCOMRAM
   167  000E9C  0E34               	movlw	low __pidataCOMRAM
   168  000E9E  6EF6               	movwf	tblptrl,c
   169  000EA0  0E11               	movlw	high __pidataCOMRAM
   170  000EA2  6EF7               	movwf	tblptrh,c
   171  000EA4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   172  000EA6  6EF8               	movwf	tblptru,c
   173  000EA8  EE00  F037         	lfsr	0,__pdataCOMRAM
   174  000EAC  EE10 F005          	lfsr	1,5
   175  000EB0                     copy_data0:
   176  000EB0  0009               	tblrd		*+
   177  000EB2  CFF5 FFEE          	movff	tablat,postinc0
   178  000EB6  50E5               	movf	postdec1,w,c
   179  000EB8  50E1               	movf	fsr1l,w,c
   180  000EBA  E1FA               	bnz	copy_data0
   181  000EBC                     end_of_initialization:
   182                           	opt stack 0
   183  000EBC                     __end_of__initialization:
   184                           	opt stack 0
   185  000EBC  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   186  000EBE  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   187  000EC0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   188  000EC2  6EF8               	movwf	tblptru,c
   189  000EC4  0100               	movlb	0
   190  000EC6  EF7F  F008         	goto	_main	;jump to C main() function
   191                           tblptru	equ	0xFF8
   192                           tblptrh	equ	0xFF7
   193                           tblptrl	equ	0xFF6
   194                           tablat	equ	0xFF5
   195                           postinc0	equ	0xFEE
   196                           wreg	equ	0xFE8
   197                           postdec1	equ	0xFE5
   198                           fsr1h	equ	0xFE2
   199                           fsr1l	equ	0xFE1
   200                           
   201                           	psect	bssCOMRAM
   202  00003C                     __pbssCOMRAM:
   203                           	opt stack 0
   204  00003C                     strtok@sp:
   205                           	opt stack 0
   206  00003C                     	ds	2
   207  00003E                     _amountOfAccessPoints:
   208                           	opt stack 0
   209  00003E                     	ds	1
   210                           tblptru	equ	0xFF8
   211                           tblptrh	equ	0xFF7
   212                           tblptrl	equ	0xFF6
   213                           tablat	equ	0xFF5
   214                           postinc0	equ	0xFEE
   215                           wreg	equ	0xFE8
   216                           postdec1	equ	0xFE5
   217                           fsr1h	equ	0xFE2
   218                           fsr1l	equ	0xFE1
   219                           
   220                           	psect	dataCOMRAM
   221  000037                     __pdataCOMRAM:
   222                           	opt stack 0
   223  000037                     _receiveBuffer:
   224                           	opt stack 0
   225  000037                     	ds	5
   226                           tblptru	equ	0xFF8
   227                           tblptrh	equ	0xFF7
   228                           tblptrl	equ	0xFF6
   229                           tablat	equ	0xFF5
   230                           postinc0	equ	0xFEE
   231                           wreg	equ	0xFE8
   232                           postdec1	equ	0xFE5
   233                           fsr1h	equ	0xFE2
   234                           fsr1l	equ	0xFE1
   235                           
   236                           	psect	bssBANK0
   237  0000B2                     __pbssBANK0:
   238                           	opt stack 0
   239  0000B2                     _receiveBuffer_space:
   240                           	opt stack 0
   241  0000B2                     	ds	32
   242                           tblptru	equ	0xFF8
   243                           tblptrh	equ	0xFF7
   244                           tblptrl	equ	0xFF6
   245                           tablat	equ	0xFF5
   246                           postinc0	equ	0xFEE
   247                           wreg	equ	0xFE8
   248                           postdec1	equ	0xFE5
   249                           fsr1h	equ	0xFE2
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	bssBIGRAM
   253  0000D2                     __pbssBIGRAM:
   254                           	opt stack 0
   255  0000D2                     _accessPoints:
   256                           	opt stack 0
   257  0000D2                     	ds	340
   258                           tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           postdec1	equ	0xFE5
   265                           fsr1h	equ	0xFE2
   266                           fsr1l	equ	0xFE1
   267                           
   268                           	psect	cstackBANK0
   269  000080                     __pcstackBANK0:
   270                           	opt stack 0
   271  000080                     performCommand@line:
   272                           	opt stack 0
   273                           
   274                           ; 50 bytes @ 0x0
   275  000080                     	ds	50
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           postdec1	equ	0xFE5
   283                           fsr1h	equ	0xFE2
   284                           fsr1l	equ	0xFE1
   285                           
   286                           	psect	cstackCOMRAM
   287  000001                     __pcstackCOMRAM:
   288                           	opt stack 0
   289  000001                     circBufPush@c:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x0
   293  000001                     	ds	2
   294  000003                     circBufPush@data:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x2
   298  000003                     	ds	1
   299  000004                     ??_circBufPush:
   300                           
   301                           ; 0 bytes @ 0x3
   302  000004                     	ds	3
   303  000007                     circBufPush@next:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x6
   307  000007                     	ds	1
   308  000008                     esp8266_fillBuffer@c:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x7
   312  000008                     	ds	1
   313  000009                     ??_ISR:
   314                           
   315                           ; 0 bytes @ 0x8
   316  000009                     	ds	14
   317  000017                     ??_isdigit:
   318  000017                     ?_strcmp:
   319                           	opt stack 0
   320  000017                     ?_strlen:
   321                           	opt stack 0
   322  000017                     ?_strchr:
   323                           	opt stack 0
   324  000017                     ?___wmul:
   325                           	opt stack 0
   326  000017                     putch@c:
   327                           	opt stack 0
   328  000017                     msdelay@b:
   329                           	opt stack 0
   330  000017                     circBufPop@c:
   331                           	opt stack 0
   332  000017                     ___wmul@multiplier:
   333                           	opt stack 0
   334  000017                     strcmp@s1:
   335                           	opt stack 0
   336  000017                     strchr@ptr:
   337                           	opt stack 0
   338  000017                     strlen@s:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x16
   342  000017                     	ds	1
   343  000018                     _isdigit$592:
   344                           	opt stack 0
   345  000018                     writeLine@line:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x17
   349  000018                     	ds	1
   350  000019                     ??_msdelay:
   351  000019                     ??_strlen:
   352  000019                     isdigit@c:
   353                           	opt stack 0
   354  000019                     circBufPop@data:
   355                           	opt stack 0
   356  000019                     ___wmul@multiplicand:
   357                           	opt stack 0
   358  000019                     strcmp@s2:
   359                           	opt stack 0
   360  000019                     strchr@chr:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x18
   364  000019                     	ds	1
   365  00001A                     
   366                           ; 0 bytes @ 0x19
   367  00001A                     	ds	1
   368  00001B                     ??_strcmp:
   369  00001B                     ??_circBufPop:
   370  00001B                     ??_strchr:
   371  00001B                     ___wmul@product:
   372                           	opt stack 0
   373  00001B                     strlen@cp:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x1A
   377  00001B                     	ds	1
   378  00001C                     strcmp@r:
   379                           	opt stack 0
   380                           
   381                           ; 1 bytes @ 0x1B
   382  00001C                     	ds	1
   383  00001D                     ?_strncmp:
   384                           	opt stack 0
   385  00001D                     ?_strspn:
   386                           	opt stack 0
   387  00001D                     ?_strcspn:
   388                           	opt stack 0
   389  00001D                     strcspn@s1:
   390                           	opt stack 0
   391  00001D                     strncmp@s1:
   392                           	opt stack 0
   393  00001D                     strspn@s1:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x1C
   397  00001D                     	ds	1
   398  00001E                     circBufPop@next:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x1D
   402  00001E                     	ds	1
   403  00001F                     getch@c:
   404                           	opt stack 0
   405  00001F                     strcspn@s2:
   406                           	opt stack 0
   407  00001F                     strncmp@s2:
   408                           	opt stack 0
   409  00001F                     strspn@s2:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x1E
   413  00001F                     	ds	1
   414  000020                     readLine@line:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x1F
   418  000020                     	ds	1
   419  000021                     ??_strspn:
   420  000021                     ??_strcspn:
   421  000021                     strncmp@len:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x20
   425  000021                     	ds	1
   426  000022                     readLine@charCnt:
   427                           	opt stack 0
   428  000022                     strcspn@i:
   429                           	opt stack 0
   430  000022                     strspn@i:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x21
   434  000022                     	ds	1
   435  000023                     ??_strncmp:
   436  000023                     readLine@c:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x22
   440  000023                     	ds	1
   441  000024                     ?_strtok:
   442                           	opt stack 0
   443  000024                     strtok@s1:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x23
   447  000024                     	ds	2
   448  000026                     ?_strstr:
   449                           	opt stack 0
   450  000026                     strstr@s1:
   451                           	opt stack 0
   452  000026                     strtok@s2:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x25
   456  000026                     	ds	2
   457  000028                     ?_atoi:
   458                           	opt stack 0
   459  000028                     atoi@s:
   460                           	opt stack 0
   461  000028                     strcpy@to:
   462                           	opt stack 0
   463  000028                     strstr@s2:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x27
   467  000028                     	ds	2
   468  00002A                     ??_atoi:
   469  00002A                     strcpy@from:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x29
   473  00002A                     	ds	2
   474  00002C                     atoi@sign:
   475                           	opt stack 0
   476  00002C                     strcpy@cp:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x2B
   480  00002C                     	ds	1
   481  00002D                     atoi@a:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x2C
   485  00002D                     	ds	2
   486  00002F                     processAccessPointLine@line:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x2E
   490  00002F                     	ds	2
   491  000031                     processAccessPointLine@parsedData:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x30
   495  000031                     	ds	2
   496  000033                     performCommand@cmd:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x32
   500  000033                     	ds	2
   501  000035                     performCommand@lineProcessor:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x34
   505  000035                     	ds	2
   506  000037                     tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           
   516                           ; 0 bytes @ 0x36
   517 ;;
   518 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   519 ;;
   520 ;; *************** function _main *****************
   521 ;; Defined at:
   522 ;;		line 87 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;		None               void
   529 ;; Registers used:
   530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   536 ;;      Params:         0       0       0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels required when called:    9
   542 ;; This function calls:
   543 ;;		_esp8266_isOnline
   544 ;;		_esp8266_listAp
   545 ;;		_setup
   546 ;; This function is called by:
   547 ;;		Startup code after reset
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text0
   552  0010FE                     __ptext0:
   553                           	opt stack 0
   554  0010FE                     _main:
   555                           	opt stack 22
   556                           
   557                           ;main.c: 89: setup();
   558                           
   559                           ;incstack = 0
   560  0010FE  EC67  F008         	call	_setup	;wreg free
   561                           
   562                           ;main.c: 92: LATAbits.LATA0 = 0;
   563  001102  9089               	bcf	3977,0,c	;volatile
   564  001104                     l1906:
   565  001104  EC73  F008         	call	_esp8266_isOnline	;wreg free
   566  001108  A0D8               	btfss	status,0,c
   567  00110A  D7FC               	goto	l1906
   568                           
   569                           ;main.c: 98: esp8266_listAp();
   570  00110C  EC5A  F008         	call	_esp8266_listAp	;wreg free
   571                           
   572                           ;main.c: 101: LATAbits.LATA0 = 1;
   573  001110  8089               	bsf	3977,0,c	;volatile
   574  001112  D7FF               	goto	l46
   575  001114                     __end_of_main:
   576                           	opt stack 0
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1h	equ	0xFE2
   585                           fsr1l	equ	0xFE1
   586                           status	equ	0xFD8
   587                           
   588 ;; *************** function _setup *****************
   589 ;; Defined at:
   590 ;;		line 107 in file "main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;		None
   595 ;; Return value:  Size  Location     Type
   596 ;;		None               void
   597 ;; Registers used:
   598 ;;		wreg, status,2, status,0, cstack
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   604 ;;      Params:         0       0       0       0       0       0       0
   605 ;;      Locals:         0       0       0       0       0       0       0
   606 ;;      Temps:          0       0       0       0       0       0       0
   607 ;;      Totals:         0       0       0       0       0       0       0
   608 ;;Total ram usage:        0 bytes
   609 ;; Hardware stack levels used:    1
   610 ;; Hardware stack levels required when called:    4
   611 ;; This function calls:
   612 ;;		_esp8266_init
   613 ;;		_msdelay
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           	psect	text1
   620  0010CE                     __ptext1:
   621                           	opt stack 0
   622  0010CE                     _setup:
   623                           	opt stack 26
   624                           
   625                           ;main.c: 109: TRISAbits.TRISA0 = 0;
   626                           
   627                           ;incstack = 0
   628  0010CE  9092               	bcf	3986,0,c	;volatile
   629                           
   630                           ;main.c: 112: GIE = 1;
   631  0010D0  8EF2               	bsf	intcon,7,c	;volatile
   632                           
   633                           ;main.c: 113: PEIE = 1;
   634  0010D2  8CF2               	bsf	intcon,6,c	;volatile
   635                           
   636                           ;main.c: 116: msdelay(1000);
   637  0010D4  0E03               	movlw	3
   638  0010D6  6E18               	movwf	msdelay@b+1,c
   639  0010D8  0EE8               	movlw	232
   640  0010DA  6E17               	movwf	msdelay@b,c
   641  0010DC  EC2D  F008         	call	_msdelay	;wreg free
   642                           
   643                           ;main.c: 119: esp8266_init();
   644  0010E0  EC1C  F008         	call	_esp8266_init	;wreg free
   645  0010E4  0012               	return		;funcret
   646  0010E6                     __end_of_setup:
   647                           	opt stack 0
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           intcon	equ	0xFF2
   653                           postinc0	equ	0xFEE
   654                           wreg	equ	0xFE8
   655                           postdec1	equ	0xFE5
   656                           fsr1h	equ	0xFE2
   657                           fsr1l	equ	0xFE1
   658                           status	equ	0xFD8
   659                           
   660 ;; *************** function _msdelay *****************
   661 ;; Defined at:
   662 ;;		line 122 in file "main.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;  b               2   22[COMRAM] unsigned int 
   665 ;; Auto vars:     Size  Location     Type
   666 ;;		None
   667 ;; Return value:  Size  Location     Type
   668 ;;		None               void
   669 ;; Registers used:
   670 ;;		wreg, status,2, status,0
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   676 ;;      Params:         2       0       0       0       0       0       0
   677 ;;      Locals:         0       0       0       0       0       0       0
   678 ;;      Temps:          1       0       0       0       0       0       0
   679 ;;      Totals:         3       0       0       0       0       0       0
   680 ;;Total ram usage:        3 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; Hardware stack levels required when called:    3
   683 ;; This function calls:
   684 ;;		Nothing
   685 ;; This function is called by:
   686 ;;		_setup
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text2
   691  00105A                     __ptext2:
   692                           	opt stack 0
   693  00105A                     _msdelay:
   694                           	opt stack 26
   695  00105A                     
   696                           ;main.c: 124: b--;
   697  00105A  0617               	decf	msdelay@b,f,c
   698  00105C  A0D8               	btfss	status,0,c
   699  00105E  0618               	decf	msdelay@b+1,f,c
   700                           
   701                           ;main.c: 125: _delay((unsigned long)((1)*(20000000/4000.0)));
   702  001060  0E07               	movlw	7
   703  001062  6E19               	movwf	??_msdelay& (0+255),c
   704  001064  0E7D               	movlw	125
   705  001066                     u1927:
   706  001066  2EE8               	decfsz	wreg,f,c
   707  001068  D7FE               	goto	u1927
   708  00106A  2E19               	decfsz	??_msdelay& (0+255),f,c
   709  00106C  D7FC               	goto	u1927
   710  00106E  F000               	nop	
   711                           
   712                           ;main.c: 126: } while(b);
   713  001070  5017               	movf	msdelay@b,w,c
   714  001072  1018               	iorwf	msdelay@b+1,w,c
   715  001074  B4D8               	btfsc	status,2,c
   716  001076  0012               	return	
   717  001078  D7F0               	goto	l1532
   718  00107A                     __end_of_msdelay:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           tblptrh	equ	0xFF7
   722                           tblptrl	equ	0xFF6
   723                           tablat	equ	0xFF5
   724                           intcon	equ	0xFF2
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postdec1	equ	0xFE5
   728                           fsr1h	equ	0xFE2
   729                           fsr1l	equ	0xFE1
   730                           status	equ	0xFD8
   731                           
   732 ;; *************** function _esp8266_init *****************
   733 ;; Defined at:
   734 ;;		line 16 in file "esp8266.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;		None
   737 ;; Auto vars:     Size  Location     Type
   738 ;;		None
   739 ;; Return value:  Size  Location     Type
   740 ;;		None               void
   741 ;; Registers used:
   742 ;;		wreg, status,2
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         0       0       0       0       0       0       0
   749 ;;      Locals:         0       0       0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0
   751 ;;      Totals:         0       0       0       0       0       0       0
   752 ;;Total ram usage:        0 bytes
   753 ;; Hardware stack levels used:    1
   754 ;; Hardware stack levels required when called:    3
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_setup
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text3
   763  001038                     __ptext3:
   764                           	opt stack 0
   765  001038                     _esp8266_init:
   766                           	opt stack 26
   767                           
   768                           ;esp8266.c: 24: TRISC7 = 1;
   769                           
   770                           ;incstack = 0
   771  001038  8E94               	bsf	3988,7,c	;volatile
   772                           
   773                           ;esp8266.c: 25: TRISC6 = 1;
   774  00103A  8C94               	bsf	3988,6,c	;volatile
   775                           
   776                           ;esp8266.c: 28: SPBRG = ((20000000 / 4) / 115200) - 1;
   777  00103C  0E2A               	movlw	42
   778  00103E  6EAF               	movwf	4015,c	;volatile
   779                           
   780                           ;esp8266.c: 29: SYNC = 0;
   781  001040  98AC               	bcf	4012,4,c	;volatile
   782                           
   783                           ;esp8266.c: 30: BRGH = 1;
   784  001042  84AC               	bsf	4012,2,c	;volatile
   785                           
   786                           ;esp8266.c: 31: BRG16 = 1;
   787  001044  86B8               	bsf	4024,3,c	;volatile
   788                           
   789                           ;esp8266.c: 33: SPEN = 1;
   790  001046  8EAB               	bsf	4011,7,c	;volatile
   791                           
   792                           ;esp8266.c: 34: CREN = 1;
   793  001048  88AB               	bsf	4011,4,c	;volatile
   794                           
   795                           ;esp8266.c: 35: SREN = 0;
   796  00104A  9AAB               	bcf	4011,5,c	;volatile
   797                           
   798                           ;esp8266.c: 36: TXIE = 0;
   799  00104C  989D               	bcf	3997,4,c	;volatile
   800                           
   801                           ;esp8266.c: 37: RCIE = 1;
   802  00104E  8A9D               	bsf	3997,5,c	;volatile
   803                           
   804                           ;esp8266.c: 38: TX9 = 0;
   805  001050  9CAC               	bcf	4012,6,c	;volatile
   806                           
   807                           ;esp8266.c: 39: RX9 = 0;
   808  001052  9CAB               	bcf	4011,6,c	;volatile
   809                           
   810                           ;esp8266.c: 40: TXEN = 0;
   811  001054  9AAC               	bcf	4012,5,c	;volatile
   812                           
   813                           ;esp8266.c: 41: TXEN = 1;
   814  001056  8AAC               	bsf	4012,5,c	;volatile
   815  001058  0012               	return		;funcret
   816  00105A                     __end_of_esp8266_init:
   817                           	opt stack 0
   818                           tblptru	equ	0xFF8
   819                           tblptrh	equ	0xFF7
   820                           tblptrl	equ	0xFF6
   821                           tablat	equ	0xFF5
   822                           intcon	equ	0xFF2
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1h	equ	0xFE2
   827                           fsr1l	equ	0xFE1
   828                           status	equ	0xFD8
   829                           
   830 ;; *************** function _esp8266_listAp *****************
   831 ;; Defined at:
   832 ;;		line 66 in file "esp8266.c"
   833 ;; Parameters:    Size  Location     Type
   834 ;;		None
   835 ;; Auto vars:     Size  Location     Type
   836 ;;		None
   837 ;; Return value:  Size  Location     Type
   838 ;;		None               void
   839 ;; Registers used:
   840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   846 ;;      Params:         0       0       0       0       0       0       0
   847 ;;      Locals:         0       0       0       0       0       0       0
   848 ;;      Temps:          0       0       0       0       0       0       0
   849 ;;      Totals:         0       0       0       0       0       0       0
   850 ;;Total ram usage:        0 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    8
   853 ;; This function calls:
   854 ;;		_performCommand
   855 ;; This function is called by:
   856 ;;		_main
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text4
   861  0010B4                     __ptext4:
   862                           	opt stack 0
   863  0010B4                     _esp8266_listAp:
   864                           	opt stack 22
   865                           
   866                           ;esp8266.c: 68: amountOfAccessPoints = 0;
   867                           
   868                           ;incstack = 0
   869  0010B4  0E00               	movlw	0
   870  0010B6  6E3E               	movwf	_amountOfAccessPoints,c
   871                           
   872                           ;esp8266.c: 71: return performCommand("AT+CWLAP", processAccessPointLine);
   873                           ;	Return value of _esp8266_listAp is never used
   874  0010B8  0E0A               	movlw	low STR_2
   875  0010BA  6E33               	movwf	performCommand@cmd,c
   876  0010BC  0E06               	movlw	high STR_2
   877  0010BE  6E34               	movwf	performCommand@cmd+1,c
   878  0010C0  0E70               	movlw	low _processAccessPointLine
   879  0010C2  6E35               	movwf	performCommand@lineProcessor,c
   880  0010C4  0E08               	movlw	high _processAccessPointLine
   881  0010C6  6E36               	movwf	performCommand@lineProcessor+1,c
   882  0010C8  EC47  F006         	call	_performCommand	;wreg free
   883  0010CC  0012               	return	
   884  0010CE                     __end_of_esp8266_listAp:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           intcon	equ	0xFF2
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           postdec1	equ	0xFE5
   894                           fsr1h	equ	0xFE2
   895                           fsr1l	equ	0xFE1
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _esp8266_isOnline *****************
   899 ;; Defined at:
   900 ;;		line 49 in file "esp8266.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;		None               void
   907 ;; Registers used:
   908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   914 ;;      Params:         0       0       0       0       0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0
   916 ;;      Temps:          0       0       0       0       0       0       0
   917 ;;      Totals:         0       0       0       0       0       0       0
   918 ;;Total ram usage:        0 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; Hardware stack levels required when called:    8
   921 ;; This function calls:
   922 ;;		_performCommand
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text5
   929  0010E6                     __ptext5:
   930                           	opt stack 0
   931  0010E6                     _esp8266_isOnline:
   932                           	opt stack 22
   933                           
   934                           ;esp8266.c: 50: performCommand("AT", (0));
   935                           
   936                           ;incstack = 0
   937  0010E6  0E1F               	movlw	low STR_1
   938  0010E8  6E33               	movwf	performCommand@cmd,c
   939  0010EA  0E06               	movlw	high STR_1
   940  0010EC  6E34               	movwf	performCommand@cmd+1,c
   941  0010EE  0E00               	movlw	0
   942  0010F0  6E35               	movwf	performCommand@lineProcessor,c
   943  0010F2  0E00               	movlw	0
   944  0010F4  6E36               	movwf	performCommand@lineProcessor+1,c
   945  0010F6  EC47  F006         	call	_performCommand	;wreg free
   946                           
   947                           ;esp8266.c: 51: return 1;
   948  0010FA  80D8               	bsf	status,0,c
   949  0010FC  0012               	return	
   950  0010FE                     __end_of_esp8266_isOnline:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           intcon	equ	0xFF2
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           postdec1	equ	0xFE5
   960                           fsr1h	equ	0xFE2
   961                           fsr1l	equ	0xFE1
   962                           status	equ	0xFD8
   963                           
   964 ;; *************** function _performCommand *****************
   965 ;; Defined at:
   966 ;;		line 101 in file "esp8266.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  cmd             2   50[COMRAM] PTR const unsigned char 
   969 ;;		 -> STR_2(9), STR_1(3), 
   970 ;;  lineProcesso    2   52[COMRAM] PTR FTN(PTR unsigned cha
   971 ;;		 -> processAccessPointLine(0), Absolute function(0), 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  line           50    0[BANK0 ] unsigned char [50]
   974 ;; Return value:  Size  Location     Type
   975 ;;		None               void
   976 ;; Registers used:
   977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   983 ;;      Params:         4       0       0       0       0       0       0
   984 ;;      Locals:         0      50       0       0       0       0       0
   985 ;;      Temps:          0       0       0       0       0       0       0
   986 ;;      Totals:         4      50       0       0       0       0       0
   987 ;;Total ram usage:       54 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    7
   990 ;; This function calls:
   991 ;;		Absolute function
   992 ;;		_processAccessPointLine
   993 ;;		_readLine
   994 ;;		_strcmp
   995 ;;		_writeLine
   996 ;; This function is called by:
   997 ;;		_esp8266_isOnline
   998 ;;		_esp8266_listAp
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text6
  1003  000C8E                     __ptext6:
  1004                           	opt stack 0
  1005  000C8E                     _performCommand:
  1006                           	opt stack 22
  1007                           
  1008                           ;esp8266.c: 103: writeLine(cmd);
  1009                           
  1010                           ;incstack = 0
  1011  000C8E  C033  F018         	movff	performCommand@cmd,writeLine@line
  1012  000C92  C034  F019         	movff	performCommand@cmd+1,writeLine@line+1
  1013  000C96  ECEE  F007         	call	_writeLine	;wreg free
  1014  000C9A                     l1864:
  1015                           
  1016                           ;esp8266.c: 107: unsigned char line[50];
  1017                           ;esp8266.c: 108: readLine(&line);
  1018  000C9A  0E80               	movlw	low performCommand@line
  1019  000C9C  6E20               	movwf	readLine@line,c
  1020  000C9E  0E00               	movlw	high performCommand@line
  1021  000CA0  6E21               	movwf	readLine@line+1,c
  1022  000CA2  EC89  F007         	call	_readLine	;wreg free
  1023                           
  1024                           ;esp8266.c: 110: if(strcmp(line, "OK") == 0) {
  1025  000CA6  0E80               	movlw	low performCommand@line
  1026  000CA8  6E17               	movwf	strcmp@s1,c
  1027  000CAA  0E00               	movlw	high performCommand@line
  1028  000CAC  6E18               	movwf	strcmp@s1+1,c
  1029  000CAE  0E1C               	movlw	low STR_7
  1030  000CB0  6E19               	movwf	strcmp@s2,c
  1031  000CB2  0E06               	movlw	high STR_7
  1032  000CB4  6E1A               	movwf	strcmp@s2+1,c
  1033  000CB6  EC65  F007         	call	_strcmp	;wreg free
  1034  000CBA  5017               	movf	?_strcmp,w,c
  1035  000CBC  1018               	iorwf	?_strcmp+1,w,c
  1036  000CBE  A4D8               	btfss	status,2,c
  1037  000CC0  D002               	goto	l1874
  1038                           
  1039                           ;esp8266.c: 111: return 1;
  1040  000CC2  80D8               	bsf	status,0,c
  1041  000CC4  0012               	return	
  1042  000CC6                     l1874:
  1043  000CC6  0E80               	movlw	low performCommand@line
  1044  000CC8  6E17               	movwf	strcmp@s1,c
  1045  000CCA  0E00               	movlw	high performCommand@line
  1046  000CCC  6E18               	movwf	strcmp@s1+1,c
  1047  000CCE  0E13               	movlw	low STR_8
  1048  000CD0  6E19               	movwf	strcmp@s2,c
  1049  000CD2  0E06               	movlw	high STR_8
  1050  000CD4  6E1A               	movwf	strcmp@s2+1,c
  1051  000CD6  EC65  F007         	call	_strcmp	;wreg free
  1052  000CDA  5017               	movf	?_strcmp,w,c
  1053  000CDC  1018               	iorwf	?_strcmp+1,w,c
  1054  000CDE  A4D8               	btfss	status,2,c
  1055  000CE0  D002               	goto	l1882
  1056                           
  1057                           ;esp8266.c: 113: return 0;
  1058  000CE2  90D8               	bcf	status,0,c
  1059  000CE4  0012               	return	
  1060  000CE6                     l1882:
  1061                           
  1062                           ;esp8266.c: 116: if(lineProcessor != (0)) {
  1063  000CE6  5035               	movf	performCommand@lineProcessor,w,c
  1064  000CE8  1036               	iorwf	performCommand@lineProcessor+1,w,c
  1065  000CEA  B4D8               	btfsc	status,2,c
  1066  000CEC  D7D6               	goto	l1864
  1067                           
  1068                           ;esp8266.c: 117: lineProcessor(line);
  1069  000CEE  0E80               	movlw	low performCommand@line
  1070  000CF0  6E2F               	movwf	processAccessPointLine@line,c
  1071  000CF2  0E00               	movlw	high performCommand@line
  1072  000CF4  6E30               	movwf	processAccessPointLine@line+1,c
  1073  000CF6  D801               	call	u1908
  1074  000CF8  D7D0               	goto	l1864
  1075  000CFA                     u1908:
  1076  000CFA  0005               	push	
  1077  000CFC  6EFA               	movwf	pclath,c
  1078  000CFE  5035               	movf	performCommand@lineProcessor,w,c
  1079  000D00  6EFD               	movwf	tosl,c
  1080  000D02  5036               	movf	performCommand@lineProcessor+1,w,c
  1081  000D04  6EFE               	movwf	tosh,c
  1082  000D06  50F8               	movf	tblptru,w,c
  1083  000D08  6EFF               	movwf	tosu,c
  1084  000D0A  50FA               	movf	pclath,w,c
  1085  000D0C  0012               	return		;indir
  1086  000D0E                     __end_of_performCommand:
  1087                           	opt stack 0
  1088                           tosu	equ	0xFFF
  1089                           tosh	equ	0xFFE
  1090                           tosl	equ	0xFFD
  1091                           pclath	equ	0xFFA
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           intcon	equ	0xFF2
  1097                           postinc0	equ	0xFEE
  1098                           wreg	equ	0xFE8
  1099                           postdec1	equ	0xFE5
  1100                           fsr1h	equ	0xFE2
  1101                           fsr1l	equ	0xFE1
  1102                           status	equ	0xFD8
  1103                           
  1104 ;; *************** function _writeLine *****************
  1105 ;; Defined at:
  1106 ;;		line 125 in file "esp8266.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;  line            2   23[COMRAM] PTR const unsigned char 
  1109 ;;		 -> STR_2(9), STR_1(3), 
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;		None
  1112 ;; Return value:  Size  Location     Type
  1113 ;;		None               void
  1114 ;; Registers used:
  1115 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1121 ;;      Params:         2       0       0       0       0       0       0
  1122 ;;      Locals:         0       0       0       0       0       0       0
  1123 ;;      Temps:          0       0       0       0       0       0       0
  1124 ;;      Totals:         2       0       0       0       0       0       0
  1125 ;;Total ram usage:        2 bytes
  1126 ;; Hardware stack levels used:    1
  1127 ;; Hardware stack levels required when called:    4
  1128 ;; This function calls:
  1129 ;;		_putch
  1130 ;; This function is called by:
  1131 ;;		_performCommand
  1132 ;; This function uses a non-reentrant model
  1133 ;;
  1134                           
  1135                           	psect	text7
  1136  000FDC                     __ptext7:
  1137                           	opt stack 0
  1138  000FDC                     _writeLine:
  1139                           	opt stack 24
  1140                           
  1141                           ;esp8266.c: 126: while (*line != 0) {
  1142                           
  1143                           ;incstack = 0
  1144  000FDC  D00A               	goto	l1828
  1145  000FDE                     l1824:
  1146                           
  1147                           ;esp8266.c: 127: putch(*line++);
  1148  000FDE  C018  FFF6         	movff	writeLine@line,tblptrl
  1149  000FE2  C019  FFF7         	movff	writeLine@line+1,tblptrh
  1150  000FE6                     	if	0	;tblptru may be non-zero
  1151  000FE6                     	endif
  1152  000FE6                     	if	0	;tblptru may be non-zero
  1153  000FE6                     	endif
  1154  000FE6  0008               	tblrd		*
  1155  000FE8  50F5               	movf	tablat,w,c
  1156  000FEA  EC94  F008         	call	_putch
  1157  000FEE  4A18               	infsnz	writeLine@line,f,c
  1158  000FF0  2A19               	incf	writeLine@line+1,f,c
  1159  000FF2                     l1828:
  1160  000FF2  C018  FFF6         	movff	writeLine@line,tblptrl
  1161  000FF6  C019  FFF7         	movff	writeLine@line+1,tblptrh
  1162  000FFA                     	if	0	;tblptru may be non-zero
  1163  000FFA                     	endif
  1164  000FFA                     	if	0	;tblptru may be non-zero
  1165  000FFA                     	endif
  1166  000FFA  0008               	tblrd		*
  1167  000FFC  50F5               	movf	tablat,w,c
  1168  000FFE  0900               	iorlw	0
  1169  001000  A4D8               	btfss	status,2,c
  1170  001002  D7ED               	goto	l1824
  1171                           
  1172                           ;esp8266.c: 128: }
  1173                           ;esp8266.c: 129: putch('\r');
  1174  001004  0E0D               	movlw	13
  1175  001006  EC94  F008         	call	_putch
  1176                           
  1177                           ;esp8266.c: 130: putch('\n');
  1178  00100A  0E0A               	movlw	10
  1179  00100C  EC94  F008         	call	_putch
  1180  001010  0012               	return		;funcret
  1181  001012                     __end_of_writeLine:
  1182                           	opt stack 0
  1183                           tosu	equ	0xFFF
  1184                           tosh	equ	0xFFE
  1185                           tosl	equ	0xFFD
  1186                           pclath	equ	0xFFA
  1187                           tblptru	equ	0xFF8
  1188                           tblptrh	equ	0xFF7
  1189                           tblptrl	equ	0xFF6
  1190                           tablat	equ	0xFF5
  1191                           intcon	equ	0xFF2
  1192                           postinc0	equ	0xFEE
  1193                           wreg	equ	0xFE8
  1194                           postdec1	equ	0xFE5
  1195                           fsr1h	equ	0xFE2
  1196                           fsr1l	equ	0xFE1
  1197                           status	equ	0xFD8
  1198                           
  1199 ;; *************** function _putch *****************
  1200 ;; Defined at:
  1201 ;;		line 155 in file "esp8266.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;  c               1    wreg     unsigned char 
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;  c               1   22[COMRAM] unsigned char 
  1206 ;; Return value:  Size  Location     Type
  1207 ;;		None               void
  1208 ;; Registers used:
  1209 ;;		wreg
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1215 ;;      Params:         0       0       0       0       0       0       0
  1216 ;;      Locals:         1       0       0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0       0       0
  1218 ;;      Totals:         1       0       0       0       0       0       0
  1219 ;;Total ram usage:        1 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; Hardware stack levels required when called:    3
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_writeLine
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text8
  1230  001128                     __ptext8:
  1231                           	opt stack 0
  1232  001128                     _putch:
  1233                           	opt stack 24
  1234                           
  1235                           ;incstack = 0
  1236                           ;putch@c stored from wreg
  1237  001128  6E17               	movwf	putch@c,c
  1238  00112A                     l171:
  1239  00112A  A89E               	btfss	3998,4,c	;volatile
  1240  00112C  D7FE               	goto	l171
  1241                           
  1242                           ;esp8266.c: 158: TXREG = c;
  1243  00112E  C017  FFAD         	movff	putch@c,4013	;volatile
  1244  001132  0012               	return		;funcret
  1245  001134                     __end_of_putch:
  1246                           	opt stack 0
  1247                           tosu	equ	0xFFF
  1248                           tosh	equ	0xFFE
  1249                           tosl	equ	0xFFD
  1250                           pclath	equ	0xFFA
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           intcon	equ	0xFF2
  1256                           postinc0	equ	0xFEE
  1257                           wreg	equ	0xFE8
  1258                           postdec1	equ	0xFE5
  1259                           fsr1h	equ	0xFE2
  1260                           fsr1l	equ	0xFE1
  1261                           status	equ	0xFD8
  1262                           
  1263 ;; *************** function _strcmp *****************
  1264 ;; Defined at:
  1265 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcmp.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  s1              2   22[COMRAM] PTR const unsigned char 
  1268 ;;		 -> performCommand@line(50), 
  1269 ;;  s2              2   24[COMRAM] PTR const unsigned char 
  1270 ;;		 -> STR_8(6), STR_7(3), 
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;  r               1   27[COMRAM] char 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  2   22[COMRAM] int 
  1275 ;; Registers used:
  1276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:         4       0       0       0       0       0       0
  1283 ;;      Locals:         1       0       0       0       0       0       0
  1284 ;;      Temps:          1       0       0       0       0       0       0
  1285 ;;      Totals:         6       0       0       0       0       0       0
  1286 ;;Total ram usage:        6 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; Hardware stack levels required when called:    3
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_performCommand
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text9
  1297  000ECA                     __ptext9:
  1298                           	opt stack 0
  1299  000ECA                     _strcmp:
  1300                           	opt stack 25
  1301                           
  1302                           ;incstack = 0
  1303  000ECA  D004               	goto	l1854
  1304  000ECC                     l1852:
  1305  000ECC  4A17               	infsnz	strcmp@s1,f,c
  1306  000ECE  2A18               	incf	strcmp@s1+1,f,c
  1307  000ED0  4A19               	infsnz	strcmp@s2,f,c
  1308  000ED2  2A1A               	incf	strcmp@s2+1,f,c
  1309  000ED4                     l1854:
  1310  000ED4  C017  FFD9         	movff	strcmp@s1,fsr2l
  1311  000ED8  C018  FFDA         	movff	strcmp@s1+1,fsr2h
  1312  000EDC  50DF               	movf	indf2,w,c
  1313  000EDE  6E1B               	movwf	??_strcmp& (0+255),c
  1314  000EE0  C019  FFF6         	movff	strcmp@s2,tblptrl
  1315  000EE4  C01A  FFF7         	movff	strcmp@s2+1,tblptrh
  1316  000EE8                     	if	0	;tblptru may be non-zero
  1317  000EE8                     	endif
  1318  000EE8                     	if	0	;tblptru may be non-zero
  1319  000EE8                     	endif
  1320  000EE8  0008               	tblrd		*
  1321  000EEA  50F5               	movf	tablat,w,c
  1322  000EEC  0800               	sublw	0
  1323  000EEE  241B               	addwf	??_strcmp,w,c
  1324  000EF0  6E1C               	movwf	strcmp@r,c
  1325  000EF2  501C               	movf	strcmp@r,w,c
  1326  000EF4  A4D8               	btfss	status,2,c
  1327  000EF6  D007               	goto	l1858
  1328  000EF8  C017  FFD9         	movff	strcmp@s1,fsr2l
  1329  000EFC  C018  FFDA         	movff	strcmp@s1+1,fsr2h
  1330  000F00  50DF               	movf	indf2,w,c
  1331  000F02  A4D8               	btfss	status,2,c
  1332  000F04  D7E3               	goto	l1852
  1333  000F06                     l1858:
  1334  000F06  501C               	movf	strcmp@r,w,c
  1335  000F08  6E17               	movwf	?_strcmp,c
  1336  000F0A  6A18               	clrf	?_strcmp+1,c
  1337  000F0C  BE17               	btfsc	?_strcmp,7,c
  1338  000F0E  0618               	decf	?_strcmp+1,f,c
  1339  000F10  0012               	return	
  1340  000F12                     __end_of_strcmp:
  1341                           	opt stack 0
  1342                           tosu	equ	0xFFF
  1343                           tosh	equ	0xFFE
  1344                           tosl	equ	0xFFD
  1345                           pclath	equ	0xFFA
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           intcon	equ	0xFF2
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1h	equ	0xFE2
  1355                           fsr1l	equ	0xFE1
  1356                           indf2	equ	0xFDF
  1357                           fsr2h	equ	0xFDA
  1358                           fsr2l	equ	0xFD9
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function _readLine *****************
  1362 ;; Defined at:
  1363 ;;		line 134 in file "esp8266.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  line            2   31[COMRAM] PTR unsigned char 
  1366 ;;		 -> performCommand@line(50), 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  c               1   34[COMRAM] unsigned char 
  1369 ;;  charCnt         1   33[COMRAM] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;		None               void
  1372 ;; Registers used:
  1373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1379 ;;      Params:         2       0       0       0       0       0       0
  1380 ;;      Locals:         2       0       0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0
  1382 ;;      Totals:         4       0       0       0       0       0       0
  1383 ;;Total ram usage:        4 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    5
  1386 ;; This function calls:
  1387 ;;		_getch
  1388 ;; This function is called by:
  1389 ;;		_performCommand
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text10
  1394  000F12                     __ptext10:
  1395                           	opt stack 0
  1396  000F12                     _readLine:
  1397                           	opt stack 23
  1398                           
  1399                           ;esp8266.c: 135: unsigned char charCnt = 0;
  1400                           
  1401                           ;incstack = 0
  1402  000F12  0E00               	movlw	0
  1403  000F14  6E22               	movwf	readLine@charCnt,c
  1404  000F16                     l1834:
  1405                           
  1406                           ;esp8266.c: 138: unsigned char c = getch();
  1407  000F16  EC4C  F008         	call	_getch	;wreg free
  1408  000F1A  6E23               	movwf	readLine@c,c
  1409                           
  1410                           ;esp8266.c: 140: if(c == '\n') {
  1411  000F1C  0E0A               	movlw	10
  1412  000F1E  1823               	xorwf	readLine@c,w,c
  1413  000F20  B4D8               	btfsc	status,2,c
  1414  000F22  0012               	return	
  1415                           
  1416                           ;esp8266.c: 142: } else if (c == '\r') {
  1417                           
  1418                           ;esp8266.c: 141: return;
  1419  000F24  0E0D               	movlw	13
  1420  000F26  1823               	xorwf	readLine@c,w,c
  1421  000F28  A4D8               	btfss	status,2,c
  1422  000F2A  D00B               	goto	l1846
  1423                           
  1424                           ;esp8266.c: 143: line[charCnt] = '\0';
  1425  000F2C  5022               	movf	readLine@charCnt,w,c
  1426  000F2E  0D01               	mullw	1
  1427  000F30  50F3               	movf	prodl,w,c
  1428  000F32  2420               	addwf	readLine@line,w,c
  1429  000F34  6ED9               	movwf	fsr2l,c
  1430  000F36  50F4               	movf	prodh,w,c
  1431  000F38  2021               	addwfc	readLine@line+1,w,c
  1432  000F3A  6EDA               	movwf	fsr2h,c
  1433  000F3C  0E00               	movlw	0
  1434  000F3E  6EDF               	movwf	indf2,c
  1435                           
  1436                           ;esp8266.c: 144: } else {
  1437  000F40  D00A               	goto	l1848
  1438  000F42                     l1846:
  1439                           
  1440                           ;esp8266.c: 145: line[charCnt] = c;
  1441  000F42  5022               	movf	readLine@charCnt,w,c
  1442  000F44  0D01               	mullw	1
  1443  000F46  50F3               	movf	prodl,w,c
  1444  000F48  2420               	addwf	readLine@line,w,c
  1445  000F4A  6ED9               	movwf	fsr2l,c
  1446  000F4C  50F4               	movf	prodh,w,c
  1447  000F4E  2021               	addwfc	readLine@line+1,w,c
  1448  000F50  6EDA               	movwf	fsr2h,c
  1449  000F52  C023  FFDF         	movff	readLine@c,indf2
  1450  000F56                     l1848:
  1451                           
  1452                           ;esp8266.c: 146: }
  1453                           ;esp8266.c: 148: charCnt++;
  1454  000F56  2A22               	incf	readLine@charCnt,f,c
  1455  000F58  D7DE               	goto	l1834
  1456  000F5A                     __end_of_readLine:
  1457                           	opt stack 0
  1458                           tosu	equ	0xFFF
  1459                           tosh	equ	0xFFE
  1460                           tosl	equ	0xFFD
  1461                           pclath	equ	0xFFA
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           prodh	equ	0xFF4
  1467                           prodl	equ	0xFF3
  1468                           intcon	equ	0xFF2
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           postdec1	equ	0xFE5
  1472                           fsr1h	equ	0xFE2
  1473                           fsr1l	equ	0xFE1
  1474                           indf2	equ	0xFDF
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8
  1478                           
  1479 ;; *************** function _getch *****************
  1480 ;; Defined at:
  1481 ;;		line 162 in file "esp8266.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  c               1   30[COMRAM] unsigned char 
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      unsigned char 
  1488 ;; Registers used:
  1489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1495 ;;      Params:         0       0       0       0       0       0       0
  1496 ;;      Locals:         1       0       0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0
  1498 ;;      Totals:         1       0       0       0       0       0       0
  1499 ;;Total ram usage:        1 bytes
  1500 ;; Hardware stack levels used:    1
  1501 ;; Hardware stack levels required when called:    4
  1502 ;; This function calls:
  1503 ;;		_circBufPop
  1504 ;; This function is called by:
  1505 ;;		_readLine
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text11
  1510  001098                     __ptext11:
  1511                           	opt stack 0
  1512  001098                     _getch:
  1513                           	opt stack 23
  1514  001098                     l1800:
  1515  001098  0E37               	movlw	low _receiveBuffer
  1516  00109A  6E17               	movwf	circBufPop@c,c
  1517  00109C  0E00               	movlw	high _receiveBuffer
  1518  00109E  6E18               	movwf	circBufPop@c+1,c
  1519  0010A0  0E1F               	movlw	low getch@c
  1520  0010A2  6E19               	movwf	circBufPop@data,c
  1521  0010A4  0E00               	movlw	high getch@c
  1522  0010A6  6E1A               	movwf	circBufPop@data+1,c
  1523  0010A8  ECA4  F004         	call	_circBufPop	;wreg free
  1524  0010AC  A0D8               	btfss	status,0,c
  1525  0010AE  D7F4               	goto	l1800
  1526                           
  1527                           ;esp8266.c: 167: return c;
  1528  0010B0  501F               	movf	getch@c,w,c
  1529  0010B2  0012               	return	
  1530  0010B4                     __end_of_getch:
  1531                           	opt stack 0
  1532                           tosu	equ	0xFFF
  1533                           tosh	equ	0xFFE
  1534                           tosl	equ	0xFFD
  1535                           pclath	equ	0xFFA
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           prodh	equ	0xFF4
  1541                           prodl	equ	0xFF3
  1542                           intcon	equ	0xFF2
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1h	equ	0xFE2
  1547                           fsr1l	equ	0xFE1
  1548                           indf2	equ	0xFDF
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _circBufPop *****************
  1554 ;; Defined at:
  1555 ;;		line 20 in file "circBuf.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;  c               2   22[COMRAM] PTR volatile struct .
  1558 ;;		 -> receiveBuffer(5), 
  1559 ;;  data            2   24[COMRAM] PTR unsigned char 
  1560 ;;		 -> getch@c(1), 
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;  next            1   29[COMRAM] unsigned char 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1572 ;;      Params:         4       0       0       0       0       0       0
  1573 ;;      Locals:         1       0       0       0       0       0       0
  1574 ;;      Temps:          3       0       0       0       0       0       0
  1575 ;;      Totals:         8       0       0       0       0       0       0
  1576 ;;Total ram usage:        8 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    3
  1579 ;; This function calls:
  1580 ;;		Nothing
  1581 ;; This function is called by:
  1582 ;;		_getch
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text12
  1587  000948                     __ptext12:
  1588                           	opt stack 0
  1589  000948                     _circBufPop:
  1590                           	opt stack 23
  1591                           
  1592                           ;circBuf.c: 23: if (c->head == c->tail)
  1593                           
  1594                           ;incstack = 0
  1595  000948  EE20 F003          	lfsr	2,3
  1596  00094C  5017               	movf	circBufPop@c,w,c
  1597  00094E  26D9               	addwf	fsr2l,f,c
  1598  000950  5018               	movf	circBufPop@c+1,w,c
  1599  000952  22DA               	addwfc	fsr2h,f,c
  1600  000954  EE10 F002          	lfsr	1,2
  1601  000958  5017               	movf	circBufPop@c,w,c
  1602  00095A  26E1               	addwf	fsr1l,f,c
  1603  00095C  5018               	movf	circBufPop@c+1,w,c
  1604  00095E  22E2               	addwfc	fsr1h,f,c
  1605  000960  50DE               	movf	postinc2,w,c
  1606  000962  18E6               	xorwf	postinc1,w,c
  1607  000964  A4D8               	btfss	status,2,c
  1608  000966  D002               	goto	l1636
  1609                           
  1610                           ;circBuf.c: 24: return 0;
  1611  000968  90D8               	bcf	status,0,c
  1612  00096A  0012               	return	
  1613  00096C                     l1636:
  1614                           
  1615                           ;circBuf.c: 26: *data = c->buffer[c->tail];
  1616  00096C  EE20 F003          	lfsr	2,3
  1617  000970  5017               	movf	circBufPop@c,w,c
  1618  000972  26D9               	addwf	fsr2l,f,c
  1619  000974  5018               	movf	circBufPop@c+1,w,c
  1620  000976  22DA               	addwfc	fsr2h,f,c
  1621  000978  50DF               	movf	indf2,w,c
  1622  00097A  6E1B               	movwf	??_circBufPop& (0+255),c
  1623  00097C  501B               	movf	??_circBufPop,w,c
  1624  00097E  0D01               	mullw	1
  1625  000980  C017  FFD9         	movff	circBufPop@c,fsr2l
  1626  000984  C018  FFDA         	movff	circBufPop@c+1,fsr2h
  1627  000988  CFDE F01C          	movff	postinc2,??_circBufPop+1
  1628  00098C  CFDD F01D          	movff	postdec2,??_circBufPop+2
  1629  000990  50F3               	movf	prodl,w,c
  1630  000992  241C               	addwf	??_circBufPop+1,w,c
  1631  000994  6ED9               	movwf	fsr2l,c
  1632  000996  50F4               	movf	prodh,w,c
  1633  000998  201D               	addwfc	??_circBufPop+2,w,c
  1634  00099A  6EDA               	movwf	fsr2h,c
  1635  00099C  C019  FFE1         	movff	circBufPop@data,fsr1l
  1636  0009A0  C01A  FFE2         	movff	circBufPop@data+1,fsr1h
  1637  0009A4  CFDF FFE7          	movff	indf2,indf1
  1638                           
  1639                           ;circBuf.c: 27: c->buffer[c->tail] = 0;
  1640  0009A8  EE20 F003          	lfsr	2,3
  1641  0009AC  5017               	movf	circBufPop@c,w,c
  1642  0009AE  26D9               	addwf	fsr2l,f,c
  1643  0009B0  5018               	movf	circBufPop@c+1,w,c
  1644  0009B2  22DA               	addwfc	fsr2h,f,c
  1645  0009B4  50DF               	movf	indf2,w,c
  1646  0009B6  6E1B               	movwf	??_circBufPop& (0+255),c
  1647  0009B8  501B               	movf	??_circBufPop,w,c
  1648  0009BA  0D01               	mullw	1
  1649  0009BC  C017  FFD9         	movff	circBufPop@c,fsr2l
  1650  0009C0  C018  FFDA         	movff	circBufPop@c+1,fsr2h
  1651  0009C4  CFDE F01C          	movff	postinc2,??_circBufPop+1
  1652  0009C8  CFDD F01D          	movff	postdec2,??_circBufPop+2
  1653  0009CC  50F3               	movf	prodl,w,c
  1654  0009CE  241C               	addwf	??_circBufPop+1,w,c
  1655  0009D0  6ED9               	movwf	fsr2l,c
  1656  0009D2  50F4               	movf	prodh,w,c
  1657  0009D4  201D               	addwfc	??_circBufPop+2,w,c
  1658  0009D6  6EDA               	movwf	fsr2h,c
  1659  0009D8  0E00               	movlw	0
  1660  0009DA  6EDF               	movwf	indf2,c
  1661                           
  1662                           ;circBuf.c: 29: unsigned char next = c->tail + 1;
  1663  0009DC  EE20 F003          	lfsr	2,3
  1664  0009E0  5017               	movf	circBufPop@c,w,c
  1665  0009E2  26D9               	addwf	fsr2l,f,c
  1666  0009E4  5018               	movf	circBufPop@c+1,w,c
  1667  0009E6  22DA               	addwfc	fsr2h,f,c
  1668  0009E8  50DF               	movf	indf2,w,c
  1669  0009EA  6E1B               	movwf	??_circBufPop& (0+255),c
  1670  0009EC  281B               	incf	??_circBufPop,w,c
  1671  0009EE  6E1E               	movwf	circBufPop@next,c
  1672                           
  1673                           ;circBuf.c: 30: if(next >= c->maxLen)
  1674  0009F0  EE20 F004          	lfsr	2,4
  1675  0009F4  5017               	movf	circBufPop@c,w,c
  1676  0009F6  26D9               	addwf	fsr2l,f,c
  1677  0009F8  5018               	movf	circBufPop@c+1,w,c
  1678  0009FA  22DA               	addwfc	fsr2h,f,c
  1679  0009FC  50DE               	movf	postinc2,w,c
  1680  0009FE  5C1E               	subwf	circBufPop@next,w,c
  1681  000A00  A0D8               	btfss	status,0,c
  1682  000A02  D002               	goto	l1646
  1683                           
  1684                           ;circBuf.c: 31: next = 0;
  1685  000A04  0E00               	movlw	0
  1686  000A06  6E1E               	movwf	circBufPop@next,c
  1687  000A08                     l1646:
  1688                           
  1689                           ;circBuf.c: 33: c->tail = next;
  1690  000A08  EE20 F003          	lfsr	2,3
  1691  000A0C  5017               	movf	circBufPop@c,w,c
  1692  000A0E  26D9               	addwf	fsr2l,f,c
  1693  000A10  5018               	movf	circBufPop@c+1,w,c
  1694  000A12  22DA               	addwfc	fsr2h,f,c
  1695  000A14  C01E  FFDF         	movff	circBufPop@next,indf2
  1696                           
  1697                           ;circBuf.c: 35: return 1;
  1698  000A18  80D8               	bsf	status,0,c
  1699  000A1A  0012               	return	
  1700  000A1C                     __end_of_circBufPop:
  1701                           	opt stack 0
  1702                           tosu	equ	0xFFF
  1703                           tosh	equ	0xFFE
  1704                           tosl	equ	0xFFD
  1705                           pclath	equ	0xFFA
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon	equ	0xFF2
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           indf1	equ	0xFE7
  1716                           postinc1	equ	0xFE6
  1717                           postdec1	equ	0xFE5
  1718                           fsr1h	equ	0xFE2
  1719                           fsr1l	equ	0xFE1
  1720                           indf2	equ	0xFDF
  1721                           postinc2	equ	0xFDE
  1722                           postdec2	equ	0xFDD
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _processAccessPointLine *****************
  1728 ;; Defined at:
  1729 ;;		line 76 in file "esp8266.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  line            2   46[COMRAM] PTR unsigned char 
  1732 ;;		 -> performCommand@line(50), 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;  parsedData      2   48[COMRAM] PTR unsigned char 
  1735 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  1736 ;;		 -> NULL(0), 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1746 ;;      Params:         2       0       0       0       0       0       0
  1747 ;;      Locals:         2       0       0       0       0       0       0
  1748 ;;      Temps:          0       0       0       0       0       0       0
  1749 ;;      Totals:         4       0       0       0       0       0       0
  1750 ;;Total ram usage:        4 bytes
  1751 ;; Hardware stack levels used:    1
  1752 ;; Hardware stack levels required when called:    6
  1753 ;; This function calls:
  1754 ;;		_atoi
  1755 ;;		_strcpy
  1756 ;;		_strstr
  1757 ;;		_strtok
  1758 ;; This function is called by:
  1759 ;;		_esp8266_listAp
  1760 ;;		_performCommand
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text13
  1765  000870                     __ptext13:
  1766                           	opt stack 0
  1767  000870                     _processAccessPointLine:
  1768                           	opt stack 22
  1769                           
  1770                           ;esp8266.c: 77: unsigned char *parsedData;
  1771                           ;esp8266.c: 80: parsedData = strstr(line, "+CWLAP:(");
  1772                           
  1773                           ;incstack = 0
  1774  000870  C02F  F026         	movff	processAccessPointLine@line,strstr@s1
  1775  000874  C030  F027         	movff	processAccessPointLine@line+1,strstr@s1+1
  1776  000878  0E01               	movlw	low STR_3
  1777  00087A  6E28               	movwf	strstr@s2,c
  1778  00087C  0E06               	movlw	high STR_3
  1779  00087E  6E29               	movwf	strstr@s2+1,c
  1780  000880  EC71  F005         	call	_strstr	;wreg free
  1781  000884  C026  F031         	movff	?_strstr,processAccessPointLine@parsedData
  1782  000888  C027  F032         	movff	?_strstr+1,processAccessPointLine@parsedData+1
  1783                           
  1784                           ;esp8266.c: 81: if(parsedData == (0))
  1785  00088C  5031               	movf	processAccessPointLine@parsedData,w,c
  1786  00088E  1032               	iorwf	processAccessPointLine@parsedData+1,w,c
  1787  000890  B4D8               	btfsc	status,2,c
  1788  000892  0012               	return	
  1789                           
  1790                           ;esp8266.c: 85: parsedData += 8;
  1791                           
  1792                           ;esp8266.c: 82: return;
  1793  000894  0E08               	movlw	8
  1794  000896  2631               	addwf	processAccessPointLine@parsedData,f,c
  1795  000898  0E00               	movlw	0
  1796  00089A  2232               	addwfc	processAccessPointLine@parsedData+1,f,c
  1797                           
  1798                           ;esp8266.c: 88: accessPoints[amountOfAccessPoints].ecn = atoi(strtok(parsedData,","));
  1799  00089C  503E               	movf	_amountOfAccessPoints,w,c
  1800  00089E  0D22               	mullw	34
  1801  0008A0  0ED2               	movlw	low _accessPoints
  1802  0008A2  24F3               	addwf	prodl,w,c
  1803  0008A4  6ED9               	movwf	fsr2l,c
  1804  0008A6  0E00               	movlw	high _accessPoints
  1805  0008A8  20F4               	addwfc	prodh,w,c
  1806  0008AA  6EDA               	movwf	fsr2h,c
  1807  0008AC  C031  F024         	movff	processAccessPointLine@parsedData,strtok@s1
  1808  0008B0  C032  F025         	movff	processAccessPointLine@parsedData+1,strtok@s1+1
  1809  0008B4  0E22               	movlw	low STR_4
  1810  0008B6  6E26               	movwf	strtok@s2,c
  1811  0008B8  0E06               	movlw	high STR_4
  1812  0008BA  6E27               	movwf	strtok@s2+1,c
  1813  0008BC  ECBC  F003         	call	_strtok	;wreg free
  1814  0008C0  C024  F028         	movff	?_strtok,atoi@s
  1815  0008C4  C025  F029         	movff	?_strtok+1,atoi@s+1
  1816  0008C8  EC13  F003         	call	_atoi	;wreg free
  1817  0008CC  5028               	movf	?_atoi,w,c
  1818  0008CE  6EDF               	movwf	indf2,c
  1819                           
  1820                           ;esp8266.c: 89: strcpy(accessPoints[amountOfAccessPoints].ssid, strtok((0),",\""));
  1821  0008D0  503E               	movf	_amountOfAccessPoints,w,c
  1822  0008D2  0D22               	mullw	34
  1823  0008D4  0E01               	movlw	1
  1824  0008D6  26F3               	addwf	prodl,f,c
  1825  0008D8  0E00               	movlw	0
  1826  0008DA  22F4               	addwfc	prodh,f,c
  1827  0008DC  0ED2               	movlw	low _accessPoints
  1828  0008DE  24F3               	addwf	prodl,w,c
  1829  0008E0  6E28               	movwf	strcpy@to,c
  1830  0008E2  0E00               	movlw	high _accessPoints
  1831  0008E4  20F4               	addwfc	prodh,w,c
  1832  0008E6  6E29               	movwf	strcpy@to+1,c
  1833  0008E8  0E00               	movlw	0
  1834  0008EA  6E24               	movwf	strtok@s1,c
  1835  0008EC  0E00               	movlw	0
  1836  0008EE  6E25               	movwf	strtok@s1+1,c
  1837  0008F0  0E19               	movlw	low STR_5
  1838  0008F2  6E26               	movwf	strtok@s2,c
  1839  0008F4  0E06               	movlw	high STR_5
  1840  0008F6  6E27               	movwf	strtok@s2+1,c
  1841  0008F8  ECBC  F003         	call	_strtok	;wreg free
  1842  0008FC  C024  F02A         	movff	?_strtok,strcpy@from
  1843  000900  C025  F02B         	movff	?_strtok+1,strcpy@from+1
  1844  000904  ECAD  F007         	call	_strcpy	;wreg free
  1845                           
  1846                           ;esp8266.c: 90: accessPoints[amountOfAccessPoints].rssi = atoi(strtok((0),","));
  1847  000908  503E               	movf	_amountOfAccessPoints,w,c
  1848  00090A  0D22               	mullw	34
  1849  00090C  0E21               	movlw	33
  1850  00090E  26F3               	addwf	prodl,f,c
  1851  000910  0E00               	movlw	0
  1852  000912  22F4               	addwfc	prodh,f,c
  1853  000914  0ED2               	movlw	low _accessPoints
  1854  000916  24F3               	addwf	prodl,w,c
  1855  000918  6ED9               	movwf	fsr2l,c
  1856  00091A  0E00               	movlw	high _accessPoints
  1857  00091C  20F4               	addwfc	prodh,w,c
  1858  00091E  6EDA               	movwf	fsr2h,c
  1859  000920  0E00               	movlw	0
  1860  000922  6E24               	movwf	strtok@s1,c
  1861  000924  0E00               	movlw	0
  1862  000926  6E25               	movwf	strtok@s1+1,c
  1863  000928  0E22               	movlw	low STR_4
  1864  00092A  6E26               	movwf	strtok@s2,c
  1865  00092C  0E06               	movlw	high STR_4
  1866  00092E  6E27               	movwf	strtok@s2+1,c
  1867  000930  ECBC  F003         	call	_strtok	;wreg free
  1868  000934  C024  F028         	movff	?_strtok,atoi@s
  1869  000938  C025  F029         	movff	?_strtok+1,atoi@s+1
  1870  00093C  EC13  F003         	call	_atoi	;wreg free
  1871  000940  5028               	movf	?_atoi,w,c
  1872  000942  6EDF               	movwf	indf2,c
  1873                           
  1874                           ;esp8266.c: 93: amountOfAccessPoints++;
  1875  000944  2A3E               	incf	_amountOfAccessPoints,f,c
  1876  000946  0012               	return		;funcret
  1877  000948                     __end_of_processAccessPointLine:
  1878                           	opt stack 0
  1879                           tosu	equ	0xFFF
  1880                           tosh	equ	0xFFE
  1881                           tosl	equ	0xFFD
  1882                           pclath	equ	0xFFA
  1883                           tblptru	equ	0xFF8
  1884                           tblptrh	equ	0xFF7
  1885                           tblptrl	equ	0xFF6
  1886                           tablat	equ	0xFF5
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           intcon	equ	0xFF2
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           indf1	equ	0xFE7
  1893                           postinc1	equ	0xFE6
  1894                           postdec1	equ	0xFE5
  1895                           fsr1h	equ	0xFE2
  1896                           fsr1l	equ	0xFE1
  1897                           indf2	equ	0xFDF
  1898                           postinc2	equ	0xFDE
  1899                           postdec2	equ	0xFDD
  1900                           fsr2h	equ	0xFDA
  1901                           fsr2l	equ	0xFD9
  1902                           status	equ	0xFD8
  1903                           
  1904 ;; *************** function _strtok *****************
  1905 ;; Defined at:
  1906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strtok.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  s1              2   35[COMRAM] PTR unsigned char 
  1909 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  1910 ;;		 -> NULL(0), 
  1911 ;;  s2              2   37[COMRAM] PTR const unsigned char 
  1912 ;;		 -> STR_6(2), STR_5(3), STR_4(2), 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  2   35[COMRAM] PTR unsigned char 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1924 ;;      Params:         4       0       0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0
  1927 ;;      Totals:         4       0       0       0       0       0       0
  1928 ;;Total ram usage:        4 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    5
  1931 ;; This function calls:
  1932 ;;		_strcspn
  1933 ;;		_strspn
  1934 ;; This function is called by:
  1935 ;;		_processAccessPointLine
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939                           	psect	text14
  1940  000778                     __ptext14:
  1941                           	opt stack 0
  1942  000778                     _strtok:
  1943                           	opt stack 22
  1944                           
  1945                           ;incstack = 0
  1946  000778  5024               	movf	strtok@s1,w,c
  1947  00077A  1025               	iorwf	strtok@s1+1,w,c
  1948  00077C  A4D8               	btfss	status,2,c
  1949  00077E  D004               	goto	l793
  1950  000780  C03C  F024         	movff	strtok@sp,strtok@s1
  1951  000784  C03D  F025         	movff	strtok@sp+1,strtok@s1+1
  1952  000788                     l793:
  1953  000788  5024               	movf	strtok@s1,w,c
  1954  00078A  1025               	iorwf	strtok@s1+1,w,c
  1955  00078C  A4D8               	btfss	status,2,c
  1956  00078E  D005               	goto	l1740
  1957  000790  0E00               	movlw	0
  1958  000792  6E24               	movwf	?_strtok,c
  1959  000794  0E00               	movlw	0
  1960  000796  6E25               	movwf	?_strtok+1,c
  1961  000798  0012               	return	
  1962  00079A                     l1740:
  1963  00079A  C024  F01D         	movff	strtok@s1,strspn@s1
  1964  00079E  C025  F01E         	movff	strtok@s1+1,strspn@s1+1
  1965  0007A2  C026  F01F         	movff	strtok@s2,strspn@s2
  1966  0007A6  C027  F020         	movff	strtok@s2+1,strspn@s2+1
  1967  0007AA  EC87  F006         	call	_strspn	;wreg free
  1968  0007AE  501D               	movf	?_strspn,w,c
  1969  0007B0  2624               	addwf	strtok@s1,f,c
  1970  0007B2  501E               	movf	?_strspn+1,w,c
  1971  0007B4  2225               	addwfc	strtok@s1+1,f,c
  1972  0007B6  C024  FFF6         	movff	strtok@s1,tblptrl
  1973  0007BA  C025  FFF7         	movff	strtok@s1+1,tblptrh
  1974  0007BE  6AF8               	clrf	tblptru,c
  1975  0007C0  0E05               	movlw	(high __ramtop+-1)
  1976  0007C2  64F7               	cpfsgt	tblptrh,c
  1977  0007C4  D003               	bra	u1607
  1978  0007C6  0008               	tblrd		*
  1979  0007C8  50F5               	movf	tablat,w,c
  1980  0007CA  D005               	bra	u1600
  1981  0007CC                     u1607:
  1982  0007CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  1983  0007D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1984  0007D4  50EF               	movf	indf0,w,c
  1985  0007D6                     u1600:
  1986  0007D6  0900               	iorlw	0
  1987  0007D8  A4D8               	btfss	status,2,c
  1988  0007DA  D009               	goto	l1748
  1989  0007DC  0E00               	movlw	0
  1990  0007DE  6E3C               	movwf	strtok@sp,c
  1991  0007E0  0E00               	movlw	0
  1992  0007E2  6E3D               	movwf	strtok@sp+1,c
  1993  0007E4  C03C  F024         	movff	strtok@sp,?_strtok
  1994  0007E8  C03D  F025         	movff	strtok@sp+1,?_strtok+1
  1995  0007EC  0012               	return	
  1996  0007EE                     l1748:
  1997  0007EE  C024  F01D         	movff	strtok@s1,strcspn@s1
  1998  0007F2  C025  F01E         	movff	strtok@s1+1,strcspn@s1+1
  1999  0007F6  C026  F01F         	movff	strtok@s2,strcspn@s2
  2000  0007FA  C027  F020         	movff	strtok@s2+1,strcspn@s2+1
  2001  0007FE  ECC6  F006         	call	_strcspn	;wreg free
  2002  000802  501D               	movf	?_strcspn,w,c
  2003  000804  2424               	addwf	strtok@s1,w,c
  2004  000806  6E3C               	movwf	strtok@sp,c
  2005  000808  501E               	movf	?_strcspn+1,w,c
  2006  00080A  2025               	addwfc	strtok@s1+1,w,c
  2007  00080C  6E3D               	movwf	strtok@sp+1,c
  2008  00080E  C03C  FFF6         	movff	strtok@sp,tblptrl
  2009  000812  C03D  FFF7         	movff	strtok@sp+1,tblptrh
  2010  000816  6AF8               	clrf	tblptru,c
  2011  000818  0E05               	movlw	(high __ramtop+-1)
  2012  00081A  64F7               	cpfsgt	tblptrh,c
  2013  00081C  D003               	bra	u1627
  2014  00081E  0008               	tblrd		*
  2015  000820  50F5               	movf	tablat,w,c
  2016  000822  D005               	bra	u1620
  2017  000824                     u1627:
  2018  000824  CFF6 FFE9          	movff	tblptrl,fsr0l
  2019  000828  CFF7 FFEA          	movff	tblptrh,fsr0h
  2020  00082C  50EF               	movf	indf0,w,c
  2021  00082E                     u1620:
  2022  00082E  0900               	iorlw	0
  2023  000830  B4D8               	btfsc	status,2,c
  2024  000832  D015               	goto	l1756
  2025  000834  C03C  FFF6         	movff	strtok@sp,tblptrl
  2026  000838  C03D  FFF7         	movff	strtok@sp+1,tblptrh
  2027  00083C  6AF8               	clrf	tblptru,c
  2028  00083E  0E05               	movlw	(high __ramtop+-1)
  2029  000840  64F7               	cpfsgt	tblptrh,c
  2030  000842  D004               	bra	u1647
  2031  000844  0E00               	movlw	0
  2032  000846  6EF5               	movwf	tablat,c
  2033  000848  000C               	tblwt		*
  2034  00084A  D006               	bra	u1640
  2035  00084C                     u1647:
  2036  00084C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2037  000850  CFF7 FFEA          	movff	tblptrh,fsr0h
  2038  000854  0E00               	movlw	0
  2039  000856  6EEF               	movwf	indf0,c
  2040  000858                     u1640:
  2041  000858  4A3C               	infsnz	strtok@sp,f,c
  2042  00085A  2A3D               	incf	strtok@sp+1,f,c
  2043  00085C  D004               	goto	l798
  2044  00085E                     l1756:
  2045  00085E  0E00               	movlw	0
  2046  000860  6E3C               	movwf	strtok@sp,c
  2047  000862  0E00               	movlw	0
  2048  000864  6E3D               	movwf	strtok@sp+1,c
  2049  000866                     l798:
  2050  000866  C024  F024         	movff	strtok@s1,?_strtok
  2051  00086A  C025  F025         	movff	strtok@s1+1,?_strtok+1
  2052  00086E  0012               	return	
  2053  000870                     __end_of_strtok:
  2054                           	opt stack 0
  2055                           tosu	equ	0xFFF
  2056                           tosh	equ	0xFFE
  2057                           tosl	equ	0xFFD
  2058                           pclath	equ	0xFFA
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           prodh	equ	0xFF4
  2064                           prodl	equ	0xFF3
  2065                           intcon	equ	0xFF2
  2066                           indf0	equ	0xFEF
  2067                           postinc0	equ	0xFEE
  2068                           fsr0h	equ	0xFEA
  2069                           fsr0l	equ	0xFE9
  2070                           wreg	equ	0xFE8
  2071                           indf1	equ	0xFE7
  2072                           postinc1	equ	0xFE6
  2073                           postdec1	equ	0xFE5
  2074                           fsr1h	equ	0xFE2
  2075                           fsr1l	equ	0xFE1
  2076                           indf2	equ	0xFDF
  2077                           postinc2	equ	0xFDE
  2078                           postdec2	equ	0xFDD
  2079                           fsr2h	equ	0xFDA
  2080                           fsr2l	equ	0xFD9
  2081                           status	equ	0xFD8
  2082                           
  2083 ;; *************** function _strspn *****************
  2084 ;; Defined at:
  2085 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strspn.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  2088 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2089 ;;		 -> NULL(0), 
  2090 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  2091 ;;		 -> STR_6(2), STR_5(3), STR_4(2), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  i               2   33[COMRAM] unsigned int 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  2   28[COMRAM] unsigned int 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2103 ;;      Params:         4       0       0       0       0       0       0
  2104 ;;      Locals:         2       0       0       0       0       0       0
  2105 ;;      Temps:          1       0       0       0       0       0       0
  2106 ;;      Totals:         7       0       0       0       0       0       0
  2107 ;;Total ram usage:        7 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    4
  2110 ;; This function calls:
  2111 ;;		_strchr
  2112 ;; This function is called by:
  2113 ;;		_strtok
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text15
  2118  000D0E                     __ptext15:
  2119                           	opt stack 0
  2120  000D0E                     _strspn:
  2121                           	opt stack 22
  2122                           
  2123                           ;incstack = 0
  2124  000D0E  0E00               	movlw	0
  2125  000D10  6E23               	movwf	strspn@i+1,c
  2126  000D12  0E00               	movlw	0
  2127  000D14  6E22               	movwf	strspn@i,c
  2128  000D16  D004               	goto	l1702
  2129  000D18                     l1700:
  2130  000D18  4A1D               	infsnz	strspn@s1,f,c
  2131  000D1A  2A1E               	incf	strspn@s1+1,f,c
  2132  000D1C  4A22               	infsnz	strspn@i,f,c
  2133  000D1E  2A23               	incf	strspn@i+1,f,c
  2134  000D20                     l1702:
  2135  000D20  C01D  FFF6         	movff	strspn@s1,tblptrl
  2136  000D24  C01E  FFF7         	movff	strspn@s1+1,tblptrh
  2137  000D28  6AF8               	clrf	tblptru,c
  2138  000D2A  0E05               	movlw	(high __ramtop+-1)
  2139  000D2C  64F7               	cpfsgt	tblptrh,c
  2140  000D2E  D003               	bra	u1467
  2141  000D30  0008               	tblrd		*
  2142  000D32  50F5               	movf	tablat,w,c
  2143  000D34  D005               	bra	u1460
  2144  000D36                     u1467:
  2145  000D36  CFF6 FFE9          	movff	tblptrl,fsr0l
  2146  000D3A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2147  000D3E  50EF               	movf	indf0,w,c
  2148  000D40                     u1460:
  2149  000D40  0900               	iorlw	0
  2150  000D42  B4D8               	btfsc	status,2,c
  2151  000D44  D01E               	goto	l857
  2152  000D46  C01F  F017         	movff	strspn@s2,strchr@ptr
  2153  000D4A  C020  F018         	movff	strspn@s2+1,strchr@ptr+1
  2154  000D4E  C01D  FFF6         	movff	strspn@s1,tblptrl
  2155  000D52  C01E  FFF7         	movff	strspn@s1+1,tblptrh
  2156  000D56  6AF8               	clrf	tblptru,c
  2157  000D58  0E05               	movlw	(high __ramtop+-1)
  2158  000D5A  64F7               	cpfsgt	tblptrh,c
  2159  000D5C  D003               	bra	u1487
  2160  000D5E  0008               	tblrd		*
  2161  000D60  50F5               	movf	tablat,w,c
  2162  000D62  D005               	bra	u1480
  2163  000D64                     u1487:
  2164  000D64  CFF6 FFE9          	movff	tblptrl,fsr0l
  2165  000D68  CFF7 FFEA          	movff	tblptrh,fsr0h
  2166  000D6C  50EF               	movf	indf0,w,c
  2167  000D6E                     u1480:
  2168  000D6E  6E21               	movwf	??_strspn& (0+255),c
  2169  000D70  5021               	movf	??_strspn,w,c
  2170  000D72  6E19               	movwf	strchr@chr,c
  2171  000D74  6A1A               	clrf	strchr@chr+1,c
  2172  000D76  EC05  F007         	call	_strchr	;wreg free
  2173  000D7A  5017               	movf	?_strchr,w,c
  2174  000D7C  1018               	iorwf	?_strchr+1,w,c
  2175  000D7E  A4D8               	btfss	status,2,c
  2176  000D80  D7CB               	goto	l1700
  2177  000D82                     l857:
  2178  000D82  C022  F01D         	movff	strspn@i,?_strspn
  2179  000D86  C023  F01E         	movff	strspn@i+1,?_strspn+1
  2180  000D8A  0012               	return		;funcret
  2181  000D8C                     __end_of_strspn:
  2182                           	opt stack 0
  2183                           tosu	equ	0xFFF
  2184                           tosh	equ	0xFFE
  2185                           tosl	equ	0xFFD
  2186                           pclath	equ	0xFFA
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           prodh	equ	0xFF4
  2192                           prodl	equ	0xFF3
  2193                           intcon	equ	0xFF2
  2194                           indf0	equ	0xFEF
  2195                           postinc0	equ	0xFEE
  2196                           fsr0h	equ	0xFEA
  2197                           fsr0l	equ	0xFE9
  2198                           wreg	equ	0xFE8
  2199                           indf1	equ	0xFE7
  2200                           postinc1	equ	0xFE6
  2201                           postdec1	equ	0xFE5
  2202                           fsr1h	equ	0xFE2
  2203                           fsr1l	equ	0xFE1
  2204                           indf2	equ	0xFDF
  2205                           postinc2	equ	0xFDE
  2206                           postdec2	equ	0xFDD
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _strcspn *****************
  2212 ;; Defined at:
  2213 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcspn.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  2216 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2217 ;;		 -> NULL(0), 
  2218 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  2219 ;;		 -> STR_6(2), STR_5(3), STR_4(2), 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  i               2   33[COMRAM] unsigned int 
  2222 ;; Return value:  Size  Location     Type
  2223 ;;                  2   28[COMRAM] unsigned int 
  2224 ;; Registers used:
  2225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2226 ;; Tracked objects:
  2227 ;;		On entry : 0/0
  2228 ;;		On exit  : 0/0
  2229 ;;		Unchanged: 0/0
  2230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2231 ;;      Params:         4       0       0       0       0       0       0
  2232 ;;      Locals:         2       0       0       0       0       0       0
  2233 ;;      Temps:          1       0       0       0       0       0       0
  2234 ;;      Totals:         7       0       0       0       0       0       0
  2235 ;;Total ram usage:        7 bytes
  2236 ;; Hardware stack levels used:    1
  2237 ;; Hardware stack levels required when called:    4
  2238 ;; This function calls:
  2239 ;;		_strchr
  2240 ;; This function is called by:
  2241 ;;		_strtok
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text16
  2246  000D8C                     __ptext16:
  2247                           	opt stack 0
  2248  000D8C                     _strcspn:
  2249                           	opt stack 22
  2250                           
  2251                           ;incstack = 0
  2252  000D8C  0E00               	movlw	0
  2253  000D8E  6E23               	movwf	strcspn@i+1,c
  2254  000D90  0E00               	movlw	0
  2255  000D92  6E22               	movwf	strcspn@i,c
  2256  000D94  D004               	goto	l1710
  2257  000D96                     l1708:
  2258  000D96  4A1D               	infsnz	strcspn@s1,f,c
  2259  000D98  2A1E               	incf	strcspn@s1+1,f,c
  2260  000D9A  4A22               	infsnz	strcspn@i,f,c
  2261  000D9C  2A23               	incf	strcspn@i+1,f,c
  2262  000D9E                     l1710:
  2263  000D9E  C01D  FFF6         	movff	strcspn@s1,tblptrl
  2264  000DA2  C01E  FFF7         	movff	strcspn@s1+1,tblptrh
  2265  000DA6  6AF8               	clrf	tblptru,c
  2266  000DA8  0E05               	movlw	(high __ramtop+-1)
  2267  000DAA  64F7               	cpfsgt	tblptrh,c
  2268  000DAC  D003               	bra	u1507
  2269  000DAE  0008               	tblrd		*
  2270  000DB0  50F5               	movf	tablat,w,c
  2271  000DB2  D005               	bra	u1500
  2272  000DB4                     u1507:
  2273  000DB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  2274  000DB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  2275  000DBC  50EF               	movf	indf0,w,c
  2276  000DBE                     u1500:
  2277  000DBE  0900               	iorlw	0
  2278  000DC0  B4D8               	btfsc	status,2,c
  2279  000DC2  D01E               	goto	l832
  2280  000DC4  C01F  F017         	movff	strcspn@s2,strchr@ptr
  2281  000DC8  C020  F018         	movff	strcspn@s2+1,strchr@ptr+1
  2282  000DCC  C01D  FFF6         	movff	strcspn@s1,tblptrl
  2283  000DD0  C01E  FFF7         	movff	strcspn@s1+1,tblptrh
  2284  000DD4  6AF8               	clrf	tblptru,c
  2285  000DD6  0E05               	movlw	(high __ramtop+-1)
  2286  000DD8  64F7               	cpfsgt	tblptrh,c
  2287  000DDA  D003               	bra	u1527
  2288  000DDC  0008               	tblrd		*
  2289  000DDE  50F5               	movf	tablat,w,c
  2290  000DE0  D005               	bra	u1520
  2291  000DE2                     u1527:
  2292  000DE2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2293  000DE6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2294  000DEA  50EF               	movf	indf0,w,c
  2295  000DEC                     u1520:
  2296  000DEC  6E21               	movwf	??_strcspn& (0+255),c
  2297  000DEE  5021               	movf	??_strcspn,w,c
  2298  000DF0  6E19               	movwf	strchr@chr,c
  2299  000DF2  6A1A               	clrf	strchr@chr+1,c
  2300  000DF4  EC05  F007         	call	_strchr	;wreg free
  2301  000DF8  5017               	movf	?_strchr,w,c
  2302  000DFA  1018               	iorwf	?_strchr+1,w,c
  2303  000DFC  B4D8               	btfsc	status,2,c
  2304  000DFE  D7CB               	goto	l1708
  2305  000E00                     l832:
  2306  000E00  C022  F01D         	movff	strcspn@i,?_strcspn
  2307  000E04  C023  F01E         	movff	strcspn@i+1,?_strcspn+1
  2308  000E08  0012               	return		;funcret
  2309  000E0A                     __end_of_strcspn:
  2310                           	opt stack 0
  2311                           tosu	equ	0xFFF
  2312                           tosh	equ	0xFFE
  2313                           tosl	equ	0xFFD
  2314                           pclath	equ	0xFFA
  2315                           tblptru	equ	0xFF8
  2316                           tblptrh	equ	0xFF7
  2317                           tblptrl	equ	0xFF6
  2318                           tablat	equ	0xFF5
  2319                           prodh	equ	0xFF4
  2320                           prodl	equ	0xFF3
  2321                           intcon	equ	0xFF2
  2322                           indf0	equ	0xFEF
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           indf1	equ	0xFE7
  2328                           postinc1	equ	0xFE6
  2329                           postdec1	equ	0xFE5
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _strstr *****************
  2340 ;; Defined at:
  2341 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strstr.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  s1              2   37[COMRAM] PTR const unsigned char 
  2344 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2345 ;;		 -> NULL(0), 
  2346 ;;  s2              2   39[COMRAM] PTR const unsigned char 
  2347 ;;		 -> STR_3(9), 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;		None
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  2   37[COMRAM] PTR unsigned char 
  2352 ;; Registers used:
  2353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2359 ;;      Params:         4       0       0       0       0       0       0
  2360 ;;      Locals:         0       0       0       0       0       0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0
  2362 ;;      Totals:         4       0       0       0       0       0       0
  2363 ;;Total ram usage:        4 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:    4
  2366 ;; This function calls:
  2367 ;;		_strchr
  2368 ;;		_strlen
  2369 ;;		_strncmp
  2370 ;; This function is called by:
  2371 ;;		_processAccessPointLine
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text17
  2376  000AE2                     __ptext17:
  2377                           	opt stack 0
  2378  000AE2                     _strstr:
  2379                           	opt stack 23
  2380                           
  2381                           ;incstack = 0
  2382  000AE2  D031               	goto	l1724
  2383  000AE4                     l1716:
  2384  000AE4  C026  F01D         	movff	strstr@s1,strncmp@s1
  2385  000AE8  C027  F01E         	movff	strstr@s1+1,strncmp@s1+1
  2386  000AEC  C028  F01F         	movff	strstr@s2,strncmp@s2
  2387  000AF0  C029  F020         	movff	strstr@s2+1,strncmp@s2+1
  2388  000AF4  C028  F017         	movff	strstr@s2,strlen@s
  2389  000AF8  C029  F018         	movff	strstr@s2+1,strlen@s+1
  2390  000AFC  ECCF  F007         	call	_strlen	;wreg free
  2391  000B00  C017  F021         	movff	?_strlen,strncmp@len
  2392  000B04  C018  F022         	movff	?_strlen+1,strncmp@len+1
  2393  000B08  EC0E  F005         	call	_strncmp	;wreg free
  2394  000B0C  501D               	movf	?_strncmp,w,c
  2395  000B0E  101E               	iorwf	?_strncmp+1,w,c
  2396  000B10  A4D8               	btfss	status,2,c
  2397  000B12  D005               	goto	l1722
  2398  000B14  C026  F026         	movff	strstr@s1,?_strstr
  2399  000B18  C027  F027         	movff	strstr@s1+1,?_strstr+1
  2400  000B1C  0012               	return	
  2401  000B1E                     l1722:
  2402  000B1E  0E01               	movlw	1
  2403  000B20  2426               	addwf	strstr@s1,w,c
  2404  000B22  6E17               	movwf	strchr@ptr,c
  2405  000B24  0E00               	movlw	0
  2406  000B26  2027               	addwfc	strstr@s1+1,w,c
  2407  000B28  6E18               	movwf	strchr@ptr+1,c
  2408  000B2A  C028  FFF6         	movff	strstr@s2,tblptrl
  2409  000B2E  C029  FFF7         	movff	strstr@s2+1,tblptrh
  2410  000B32                     	if	0	;tblptru may be non-zero
  2411  000B32                     	endif
  2412  000B32                     	if	0	;tblptru may be non-zero
  2413  000B32                     	endif
  2414  000B32  0008               	tblrd		*
  2415  000B34  50F5               	movf	tablat,w,c
  2416  000B36  6E19               	movwf	strchr@chr,c
  2417  000B38  6A1A               	clrf	strchr@chr+1,c
  2418  000B3A  EC05  F007         	call	_strchr	;wreg free
  2419  000B3E  C017  F026         	movff	?_strchr,strstr@s1
  2420  000B42  C018  F027         	movff	?_strchr+1,strstr@s1+1
  2421  000B46                     l1724:
  2422  000B46  5026               	movf	strstr@s1,w,c
  2423  000B48  1027               	iorwf	strstr@s1+1,w,c
  2424  000B4A  B4D8               	btfsc	status,2,c
  2425  000B4C  D013               	goto	l1728
  2426  000B4E  C026  FFF6         	movff	strstr@s1,tblptrl
  2427  000B52  C027  FFF7         	movff	strstr@s1+1,tblptrh
  2428  000B56  6AF8               	clrf	tblptru,c
  2429  000B58  0E05               	movlw	(high __ramtop+-1)
  2430  000B5A  64F7               	cpfsgt	tblptrh,c
  2431  000B5C  D003               	bra	u1567
  2432  000B5E  0008               	tblrd		*
  2433  000B60  50F5               	movf	tablat,w,c
  2434  000B62  D005               	bra	u1560
  2435  000B64                     u1567:
  2436  000B64  CFF6 FFE9          	movff	tblptrl,fsr0l
  2437  000B68  CFF7 FFEA          	movff	tblptrh,fsr0h
  2438  000B6C  50EF               	movf	indf0,w,c
  2439  000B6E                     u1560:
  2440  000B6E  0900               	iorlw	0
  2441  000B70  A4D8               	btfss	status,2,c
  2442  000B72  D7B8               	goto	l1716
  2443  000B74                     l1728:
  2444  000B74  0E00               	movlw	0
  2445  000B76  6E26               	movwf	?_strstr,c
  2446  000B78  0E00               	movlw	0
  2447  000B7A  6E27               	movwf	?_strstr+1,c
  2448  000B7C  0012               	return	
  2449  000B7E                     __end_of_strstr:
  2450                           	opt stack 0
  2451                           tosu	equ	0xFFF
  2452                           tosh	equ	0xFFE
  2453                           tosl	equ	0xFFD
  2454                           pclath	equ	0xFFA
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           prodh	equ	0xFF4
  2460                           prodl	equ	0xFF3
  2461                           intcon	equ	0xFF2
  2462                           indf0	equ	0xFEF
  2463                           postinc0	equ	0xFEE
  2464                           fsr0h	equ	0xFEA
  2465                           fsr0l	equ	0xFE9
  2466                           wreg	equ	0xFE8
  2467                           indf1	equ	0xFE7
  2468                           postinc1	equ	0xFE6
  2469                           postdec1	equ	0xFE5
  2470                           fsr1h	equ	0xFE2
  2471                           fsr1l	equ	0xFE1
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _strncmp *****************
  2480 ;; Defined at:
  2481 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strncmp.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  s1              2   28[COMRAM] PTR const unsigned char 
  2484 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2485 ;;		 -> NULL(0), 
  2486 ;;  s2              2   30[COMRAM] PTR const unsigned char 
  2487 ;;		 -> STR_3(9), 
  2488 ;;  len             2   32[COMRAM] unsigned int 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  2   28[COMRAM] int 
  2493 ;; Registers used:
  2494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2495 ;; Tracked objects:
  2496 ;;		On entry : 0/0
  2497 ;;		On exit  : 0/0
  2498 ;;		Unchanged: 0/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2500 ;;      Params:         6       0       0       0       0       0       0
  2501 ;;      Locals:         0       0       0       0       0       0       0
  2502 ;;      Temps:          3       0       0       0       0       0       0
  2503 ;;      Totals:         9       0       0       0       0       0       0
  2504 ;;Total ram usage:        9 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:    3
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_strstr
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text18
  2515  000A1C                     __ptext18:
  2516                           	opt stack 0
  2517  000A1C                     _strncmp:
  2518                           	opt stack 23
  2519                           
  2520                           ;incstack = 0
  2521  000A1C  D055               	goto	l1692
  2522  000A1E                     l1682:
  2523  000A1E  C01D  FFF6         	movff	strncmp@s1,tblptrl
  2524  000A22  C01E  FFF7         	movff	strncmp@s1+1,tblptrh
  2525  000A26  6AF8               	clrf	tblptru,c
  2526  000A28  0E05               	movlw	(high __ramtop+-1)
  2527  000A2A  64F7               	cpfsgt	tblptrh,c
  2528  000A2C  D003               	bra	u1417
  2529  000A2E  0008               	tblrd		*
  2530  000A30  50F5               	movf	tablat,w,c
  2531  000A32  D005               	bra	u1410
  2532  000A34                     u1417:
  2533  000A34  CFF6 FFE9          	movff	tblptrl,fsr0l
  2534  000A38  CFF7 FFEA          	movff	tblptrh,fsr0h
  2535  000A3C  50EF               	movf	indf0,w,c
  2536  000A3E                     u1410:
  2537  000A3E  0900               	iorlw	0
  2538  000A40  B4D8               	btfsc	status,2,c
  2539  000A42  D01A               	goto	l1686
  2540  000A44  C01F  FFF6         	movff	strncmp@s2,tblptrl
  2541  000A48  C020  FFF7         	movff	strncmp@s2+1,tblptrh
  2542  000A4C                     	if	0	;tblptru may be non-zero
  2543  000A4C                     	endif
  2544  000A4C                     	if	0	;tblptru may be non-zero
  2545  000A4C                     	endif
  2546  000A4C  0008               	tblrd		*
  2547  000A4E  CFF5 F023          	movff	tablat,??_strncmp
  2548  000A52  C01D  FFF6         	movff	strncmp@s1,tblptrl
  2549  000A56  C01E  FFF7         	movff	strncmp@s1+1,tblptrh
  2550  000A5A  6AF8               	clrf	tblptru,c
  2551  000A5C  0E05               	movlw	(high __ramtop+-1)
  2552  000A5E  64F7               	cpfsgt	tblptrh,c
  2553  000A60  D003               	bra	u1437
  2554  000A62  0008               	tblrd		*
  2555  000A64  50F5               	movf	tablat,w,c
  2556  000A66  D005               	bra	u1435
  2557  000A68                     u1437:
  2558  000A68  CFF6 FFE9          	movff	tblptrl,fsr0l
  2559  000A6C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2560  000A70  50EF               	movf	indf0,w,c
  2561  000A72                     u1435:
  2562  000A72  1823               	xorwf	??_strncmp,w,c
  2563  000A74  B4D8               	btfsc	status,2,c
  2564  000A76  D024               	goto	l1690
  2565  000A78                     l1686:
  2566  000A78  C01F  FFF6         	movff	strncmp@s2,tblptrl
  2567  000A7C  C020  FFF7         	movff	strncmp@s2+1,tblptrh
  2568  000A80                     	if	0	;tblptru may be non-zero
  2569  000A80                     	endif
  2570  000A80                     	if	0	;tblptru may be non-zero
  2571  000A80                     	endif
  2572  000A80  0008               	tblrd		*
  2573  000A82  50F5               	movf	tablat,w,c
  2574  000A84  6E23               	movwf	??_strncmp& (0+255),c
  2575  000A86  6A24               	clrf	(??_strncmp+1)& (0+255),c
  2576  000A88  1E23               	comf	??_strncmp,f,c
  2577  000A8A  1E24               	comf	??_strncmp+1,f,c
  2578  000A8C  4A23               	infsnz	??_strncmp,f,c
  2579  000A8E  2A24               	incf	??_strncmp+1,f,c
  2580  000A90  C01D  FFF6         	movff	strncmp@s1,tblptrl
  2581  000A94  C01E  FFF7         	movff	strncmp@s1+1,tblptrh
  2582  000A98  6AF8               	clrf	tblptru,c
  2583  000A9A  0E05               	movlw	(high __ramtop+-1)
  2584  000A9C  64F7               	cpfsgt	tblptrh,c
  2585  000A9E  D003               	bra	u1447
  2586  000AA0  0008               	tblrd		*
  2587  000AA2  50F5               	movf	tablat,w,c
  2588  000AA4  D005               	bra	u1440
  2589  000AA6                     u1447:
  2590  000AA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2591  000AAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2592  000AAE  50EF               	movf	indf0,w,c
  2593  000AB0                     u1440:
  2594  000AB0  6E25               	movwf	(??_strncmp+2)& (0+255),c
  2595  000AB2  5025               	movf	??_strncmp+2,w,c
  2596  000AB4  2423               	addwf	??_strncmp,w,c
  2597  000AB6  6E1D               	movwf	?_strncmp,c
  2598  000AB8  0E00               	movlw	0
  2599  000ABA  2024               	addwfc	??_strncmp+1,w,c
  2600  000ABC  6E1E               	movwf	?_strncmp+1,c
  2601  000ABE  0012               	return	
  2602  000AC0                     l1690:
  2603  000AC0  4A1D               	infsnz	strncmp@s1,f,c
  2604  000AC2  2A1E               	incf	strncmp@s1+1,f,c
  2605  000AC4  4A1F               	infsnz	strncmp@s2,f,c
  2606  000AC6  2A20               	incf	strncmp@s2+1,f,c
  2607  000AC8                     l1692:
  2608  000AC8  0621               	decf	strncmp@len,f,c
  2609  000ACA  A0D8               	btfss	status,0,c
  2610  000ACC  0622               	decf	strncmp@len+1,f,c
  2611  000ACE  2821               	incf	strncmp@len,w,c
  2612  000AD0  E1A6               	bnz	l1682
  2613  000AD2  2822               	incf	strncmp@len+1,w,c
  2614  000AD4  A4D8               	btfss	status,2,c
  2615  000AD6  D7A3               	goto	l1682
  2616  000AD8  0E00               	movlw	0
  2617  000ADA  6E1E               	movwf	?_strncmp+1,c
  2618  000ADC  0E00               	movlw	0
  2619  000ADE  6E1D               	movwf	?_strncmp,c
  2620  000AE0  0012               	return	
  2621  000AE2                     __end_of_strncmp:
  2622                           	opt stack 0
  2623                           tosu	equ	0xFFF
  2624                           tosh	equ	0xFFE
  2625                           tosl	equ	0xFFD
  2626                           pclath	equ	0xFFA
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           prodh	equ	0xFF4
  2632                           prodl	equ	0xFF3
  2633                           intcon	equ	0xFF2
  2634                           indf0	equ	0xFEF
  2635                           postinc0	equ	0xFEE
  2636                           fsr0h	equ	0xFEA
  2637                           fsr0l	equ	0xFE9
  2638                           wreg	equ	0xFE8
  2639                           indf1	equ	0xFE7
  2640                           postinc1	equ	0xFE6
  2641                           postdec1	equ	0xFE5
  2642                           fsr1h	equ	0xFE2
  2643                           fsr1l	equ	0xFE1
  2644                           indf2	equ	0xFDF
  2645                           postinc2	equ	0xFDE
  2646                           postdec2	equ	0xFDD
  2647                           fsr2h	equ	0xFDA
  2648                           fsr2l	equ	0xFD9
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _strlen *****************
  2652 ;; Defined at:
  2653 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strlen.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  s               2   22[COMRAM] PTR const unsigned char 
  2656 ;;		 -> STR_3(9), 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  cp              2   26[COMRAM] PTR const unsigned char 
  2659 ;;		 -> STR_3(9), 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  2   22[COMRAM] unsigned int 
  2662 ;; Registers used:
  2663 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2669 ;;      Params:         2       0       0       0       0       0       0
  2670 ;;      Locals:         2       0       0       0       0       0       0
  2671 ;;      Temps:          2       0       0       0       0       0       0
  2672 ;;      Totals:         6       0       0       0       0       0       0
  2673 ;;Total ram usage:        6 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    3
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_strstr
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text19
  2684  000F9E                     __ptext19:
  2685                           	opt stack 0
  2686  000F9E                     _strlen:
  2687                           	opt stack 23
  2688                           
  2689                           ;incstack = 0
  2690  000F9E  C017  F01B         	movff	strlen@s,strlen@cp
  2691  000FA2  C018  F01C         	movff	strlen@s+1,strlen@cp+1
  2692  000FA6  D002               	goto	l1674
  2693  000FA8                     l1672:
  2694  000FA8  4A1B               	infsnz	strlen@cp,f,c
  2695  000FAA  2A1C               	incf	strlen@cp+1,f,c
  2696  000FAC                     l1674:
  2697  000FAC  C01B  FFF6         	movff	strlen@cp,tblptrl
  2698  000FB0  C01C  FFF7         	movff	strlen@cp+1,tblptrh
  2699  000FB4                     	if	0	;tblptru may be non-zero
  2700  000FB4                     	endif
  2701  000FB4                     	if	0	;tblptru may be non-zero
  2702  000FB4                     	endif
  2703  000FB4  0008               	tblrd		*
  2704  000FB6  50F5               	movf	tablat,w,c
  2705  000FB8  0900               	iorlw	0
  2706  000FBA  A4D8               	btfss	status,2,c
  2707  000FBC  D7F5               	goto	l1672
  2708  000FBE  C017  F019         	movff	strlen@s,??_strlen
  2709  000FC2  C018  F01A         	movff	strlen@s+1,??_strlen+1
  2710  000FC6  1E19               	comf	??_strlen,f,c
  2711  000FC8  1E1A               	comf	??_strlen+1,f,c
  2712  000FCA  4A19               	infsnz	??_strlen,f,c
  2713  000FCC  2A1A               	incf	??_strlen+1,f,c
  2714  000FCE  501B               	movf	strlen@cp,w,c
  2715  000FD0  2419               	addwf	??_strlen,w,c
  2716  000FD2  6E17               	movwf	?_strlen,c
  2717  000FD4  501C               	movf	strlen@cp+1,w,c
  2718  000FD6  201A               	addwfc	??_strlen+1,w,c
  2719  000FD8  6E18               	movwf	?_strlen+1,c
  2720  000FDA  0012               	return	
  2721  000FDC                     __end_of_strlen:
  2722                           	opt stack 0
  2723                           tosu	equ	0xFFF
  2724                           tosh	equ	0xFFE
  2725                           tosl	equ	0xFFD
  2726                           pclath	equ	0xFFA
  2727                           tblptru	equ	0xFF8
  2728                           tblptrh	equ	0xFF7
  2729                           tblptrl	equ	0xFF6
  2730                           tablat	equ	0xFF5
  2731                           prodh	equ	0xFF4
  2732                           prodl	equ	0xFF3
  2733                           intcon	equ	0xFF2
  2734                           indf0	equ	0xFEF
  2735                           postinc0	equ	0xFEE
  2736                           fsr0h	equ	0xFEA
  2737                           fsr0l	equ	0xFE9
  2738                           wreg	equ	0xFE8
  2739                           indf1	equ	0xFE7
  2740                           postinc1	equ	0xFE6
  2741                           postdec1	equ	0xFE5
  2742                           fsr1h	equ	0xFE2
  2743                           fsr1l	equ	0xFE1
  2744                           indf2	equ	0xFDF
  2745                           postinc2	equ	0xFDE
  2746                           postdec2	equ	0xFDD
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _strchr *****************
  2752 ;; Defined at:
  2753 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strchr.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  ptr             2   22[COMRAM] PTR const unsigned char 
  2756 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2757 ;;		 -> NULL(0), 
  2758 ;;  chr             2   24[COMRAM] int 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2   22[COMRAM] PTR unsigned char 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2770 ;;      Params:         4       0       0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0       0       0
  2772 ;;      Temps:          2       0       0       0       0       0       0
  2773 ;;      Totals:         6       0       0       0       0       0       0
  2774 ;;Total ram usage:        6 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    3
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_strstr
  2781 ;;		_strcspn
  2782 ;;		_strspn
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text20
  2787  000E0A                     __ptext20:
  2788                           	opt stack 0
  2789  000E0A                     _strchr:
  2790                           	opt stack 22
  2791  000E0A  C017  FFF6         	movff	strchr@ptr,tblptrl
  2792  000E0E  C018  FFF7         	movff	strchr@ptr+1,tblptrh
  2793  000E12  6AF8               	clrf	tblptru,c
  2794  000E14  0E05               	movlw	(high __ramtop+-1)
  2795  000E16  64F7               	cpfsgt	tblptrh,c
  2796  000E18  D003               	bra	u1327
  2797  000E1A  0008               	tblrd		*
  2798  000E1C  50F5               	movf	tablat,w,c
  2799  000E1E  D005               	bra	u1320
  2800  000E20                     u1327:
  2801  000E20  CFF6 FFE9          	movff	tblptrl,fsr0l
  2802  000E24  CFF7 FFEA          	movff	tblptrh,fsr0h
  2803  000E28  50EF               	movf	indf0,w,c
  2804  000E2A                     u1320:
  2805  000E2A  1819               	xorwf	strchr@chr,w,c
  2806  000E2C  A4D8               	btfss	status,2,c
  2807  000E2E  D005               	goto	l1624
  2808  000E30  C017  F017         	movff	strchr@ptr,?_strchr
  2809  000E34  C018  F018         	movff	strchr@ptr+1,?_strchr+1
  2810  000E38  0012               	return	
  2811  000E3A                     l1624:
  2812  000E3A  5017               	movf	strchr@ptr,w,c
  2813  000E3C  6E1B               	movwf	??_strchr& (0+255),c
  2814  000E3E  5018               	movf	strchr@ptr+1,w,c
  2815  000E40  6E1C               	movwf	(??_strchr+1)& (0+255),c
  2816  000E42  4A17               	infsnz	strchr@ptr,f,c
  2817  000E44  2A18               	incf	strchr@ptr+1,f,c
  2818  000E46  C01B  FFF6         	movff	??_strchr,tblptrl
  2819  000E4A  C01C  FFF7         	movff	??_strchr+1,tblptrh
  2820  000E4E  6AF8               	clrf	tblptru,c
  2821  000E50  0E05               	movlw	(high __ramtop+-1)
  2822  000E52  64F7               	cpfsgt	tblptrh,c
  2823  000E54  D003               	bra	u1347
  2824  000E56  0008               	tblrd		*
  2825  000E58  50F5               	movf	tablat,w,c
  2826  000E5A  D005               	bra	u1340
  2827  000E5C                     u1347:
  2828  000E5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2829  000E60  CFF7 FFEA          	movff	tblptrh,fsr0h
  2830  000E64  50EF               	movf	indf0,w,c
  2831  000E66                     u1340:
  2832  000E66  0900               	iorlw	0
  2833  000E68  A4D8               	btfss	status,2,c
  2834  000E6A  D7CF               	goto	l1618
  2835  000E6C  0E00               	movlw	0
  2836  000E6E  6E17               	movwf	?_strchr,c
  2837  000E70  0E00               	movlw	0
  2838  000E72  6E18               	movwf	?_strchr+1,c
  2839  000E74  0012               	return	
  2840  000E76                     __end_of_strchr:
  2841                           	opt stack 0
  2842                           tosu	equ	0xFFF
  2843                           tosh	equ	0xFFE
  2844                           tosl	equ	0xFFD
  2845                           pclath	equ	0xFFA
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           intcon	equ	0xFF2
  2853                           indf0	equ	0xFEF
  2854                           postinc0	equ	0xFEE
  2855                           fsr0h	equ	0xFEA
  2856                           fsr0l	equ	0xFE9
  2857                           wreg	equ	0xFE8
  2858                           indf1	equ	0xFE7
  2859                           postinc1	equ	0xFE6
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _strcpy *****************
  2871 ;; Defined at:
  2872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\strcpy.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  to              2   39[COMRAM] PTR unsigned char 
  2875 ;;		 -> accessPoints(340), 
  2876 ;;  from            2   41[COMRAM] PTR const unsigned char 
  2877 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2878 ;;		 -> NULL(0), 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  cp              2   43[COMRAM] PTR unsigned char 
  2881 ;;		 -> accessPoints(340), 
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  2   39[COMRAM] PTR unsigned char 
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2891 ;;      Params:         4       0       0       0       0       0       0
  2892 ;;      Locals:         2       0       0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0       0       0
  2894 ;;      Totals:         6       0       0       0       0       0       0
  2895 ;;Total ram usage:        6 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    3
  2898 ;; This function calls:
  2899 ;;		Nothing
  2900 ;; This function is called by:
  2901 ;;		_processAccessPointLine
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text21
  2906  000F5A                     __ptext21:
  2907                           	opt stack 0
  2908  000F5A                     _strcpy:
  2909                           	opt stack 24
  2910                           
  2911                           ;incstack = 0
  2912  000F5A  C028  F02C         	movff	strcpy@to,strcpy@cp
  2913  000F5E  C029  F02D         	movff	strcpy@to+1,strcpy@cp+1
  2914  000F62  D004               	goto	l1792
  2915  000F64                     l1790:
  2916  000F64  4A2C               	infsnz	strcpy@cp,f,c
  2917  000F66  2A2D               	incf	strcpy@cp+1,f,c
  2918  000F68  4A2A               	infsnz	strcpy@from,f,c
  2919  000F6A  2A2B               	incf	strcpy@from+1,f,c
  2920  000F6C                     l1792:
  2921  000F6C  C02A  FFF6         	movff	strcpy@from,tblptrl
  2922  000F70  C02B  FFF7         	movff	strcpy@from+1,tblptrh
  2923  000F74  6AF8               	clrf	tblptru,c
  2924  000F76  C02C  FFD9         	movff	strcpy@cp,fsr2l
  2925  000F7A  C02D  FFDA         	movff	strcpy@cp+1,fsr2h
  2926  000F7E  0E05               	movlw	(high __ramtop+-1)
  2927  000F80  64F7               	cpfsgt	tblptrh,c
  2928  000F82  D003               	bra	u1777
  2929  000F84  0008               	tblrd		*
  2930  000F86  50F5               	movf	tablat,w,c
  2931  000F88  D005               	bra	u1770
  2932  000F8A                     u1777:
  2933  000F8A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2934  000F8E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2935  000F92  50EF               	movf	indf0,w,c
  2936  000F94                     u1770:
  2937  000F94  6EDF               	movwf	indf2,c
  2938  000F96  50DF               	movf	indf2,w,c
  2939  000F98  B4D8               	btfsc	status,2,c
  2940  000F9A  0012               	return	
  2941  000F9C  D7E3               	goto	l1790
  2942  000F9E                     __end_of_strcpy:
  2943                           	opt stack 0
  2944                           tosu	equ	0xFFF
  2945                           tosh	equ	0xFFE
  2946                           tosl	equ	0xFFD
  2947                           pclath	equ	0xFFA
  2948                           tblptru	equ	0xFF8
  2949                           tblptrh	equ	0xFF7
  2950                           tblptrl	equ	0xFF6
  2951                           tablat	equ	0xFF5
  2952                           prodh	equ	0xFF4
  2953                           prodl	equ	0xFF3
  2954                           intcon	equ	0xFF2
  2955                           indf0	equ	0xFEF
  2956                           postinc0	equ	0xFEE
  2957                           fsr0h	equ	0xFEA
  2958                           fsr0l	equ	0xFE9
  2959                           wreg	equ	0xFE8
  2960                           indf1	equ	0xFE7
  2961                           postinc1	equ	0xFE6
  2962                           postdec1	equ	0xFE5
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _atoi *****************
  2973 ;; Defined at:
  2974 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\atoi.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  s               2   39[COMRAM] PTR const unsigned char 
  2977 ;;		 -> performCommand@line(50), STR_6(2), STR_5(3), STR_4(2), 
  2978 ;;		 -> NULL(0), 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  a               2   44[COMRAM] int 
  2981 ;;  sign            1   43[COMRAM] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  2   39[COMRAM] int 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         2       0       0       0       0       0       0
  2992 ;;      Locals:         3       0       0       0       0       0       0
  2993 ;;      Temps:          2       0       0       0       0       0       0
  2994 ;;      Totals:         7       0       0       0       0       0       0
  2995 ;;Total ram usage:        7 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    4
  2998 ;; This function calls:
  2999 ;;		___wmul
  3000 ;;		_isdigit
  3001 ;; This function is called by:
  3002 ;;		_processAccessPointLine
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text22
  3007  000626                     __ptext22:
  3008                           	opt stack 0
  3009  000626                     _atoi:
  3010                           	opt stack 23
  3011                           
  3012                           ;incstack = 0
  3013  000626  D002               	goto	l1764
  3014  000628                     l1762:
  3015  000628  4A28               	infsnz	atoi@s,f,c
  3016  00062A  2A29               	incf	atoi@s+1,f,c
  3017  00062C                     l1764:
  3018  00062C  C028  FFF6         	movff	atoi@s,tblptrl
  3019  000630  C029  FFF7         	movff	atoi@s+1,tblptrh
  3020  000634  6AF8               	clrf	tblptru,c
  3021  000636  0E05               	movlw	(high __ramtop+-1)
  3022  000638  64F7               	cpfsgt	tblptrh,c
  3023  00063A  D003               	bra	u1657
  3024  00063C  0008               	tblrd		*
  3025  00063E  50F5               	movf	tablat,w,c
  3026  000640  D005               	bra	u1650
  3027  000642                     u1657:
  3028  000642  CFF6 FFE9          	movff	tblptrl,fsr0l
  3029  000646  CFF7 FFEA          	movff	tblptrh,fsr0h
  3030  00064A  50EF               	movf	indf0,w,c
  3031  00064C                     u1650:
  3032  00064C  0A20               	xorlw	32
  3033  00064E  B4D8               	btfsc	status,2,c
  3034  000650  D7EB               	goto	l1762
  3035  000652  C028  FFF6         	movff	atoi@s,tblptrl
  3036  000656  C029  FFF7         	movff	atoi@s+1,tblptrh
  3037  00065A  6AF8               	clrf	tblptru,c
  3038  00065C  0E05               	movlw	(high __ramtop+-1)
  3039  00065E  64F7               	cpfsgt	tblptrh,c
  3040  000660  D003               	bra	u1677
  3041  000662  0008               	tblrd		*
  3042  000664  50F5               	movf	tablat,w,c
  3043  000666  D005               	bra	u1670
  3044  000668                     u1677:
  3045  000668  CFF6 FFE9          	movff	tblptrl,fsr0l
  3046  00066C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3047  000670  50EF               	movf	indf0,w,c
  3048  000672                     u1670:
  3049  000672  0A09               	xorlw	9
  3050  000674  B4D8               	btfsc	status,2,c
  3051  000676  D7D8               	goto	l1762
  3052  000678  0E00               	movlw	0
  3053  00067A  6E2E               	movwf	atoi@a+1,c
  3054  00067C  0E00               	movlw	0
  3055  00067E  6E2D               	movwf	atoi@a,c
  3056  000680  0E00               	movlw	0
  3057  000682  6E2C               	movwf	atoi@sign,c
  3058  000684  C028  FFF6         	movff	atoi@s,tblptrl
  3059  000688  C029  FFF7         	movff	atoi@s+1,tblptrh
  3060  00068C  6AF8               	clrf	tblptru,c
  3061  00068E  0E05               	movlw	(high __ramtop+-1)
  3062  000690  64F7               	cpfsgt	tblptrh,c
  3063  000692  D003               	bra	u1697
  3064  000694  0008               	tblrd		*
  3065  000696  50F5               	movf	tablat,w,c
  3066  000698  D005               	bra	u1690
  3067  00069A                     u1697:
  3068  00069A  CFF6 FFE9          	movff	tblptrl,fsr0l
  3069  00069E  CFF7 FFEA          	movff	tblptrh,fsr0h
  3070  0006A2  50EF               	movf	indf0,w,c
  3071  0006A4                     u1690:
  3072  0006A4  0A2D               	xorlw	45
  3073  0006A6  A4D8               	btfss	status,2,c
  3074  0006A8  D002               	goto	l1774
  3075  0006AA  2A2C               	incf	atoi@sign,f,c
  3076  0006AC  D03A               	goto	l1780
  3077  0006AE                     l1774:
  3078  0006AE  C028  FFF6         	movff	atoi@s,tblptrl
  3079  0006B2  C029  FFF7         	movff	atoi@s+1,tblptrh
  3080  0006B6  6AF8               	clrf	tblptru,c
  3081  0006B8  0E05               	movlw	(high __ramtop+-1)
  3082  0006BA  64F7               	cpfsgt	tblptrh,c
  3083  0006BC  D003               	bra	u1717
  3084  0006BE  0008               	tblrd		*
  3085  0006C0  50F5               	movf	tablat,w,c
  3086  0006C2  D005               	bra	u1710
  3087  0006C4                     u1717:
  3088  0006C4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3089  0006C8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3090  0006CC  50EF               	movf	indf0,w,c
  3091  0006CE                     u1710:
  3092  0006CE  0A2B               	xorlw	43
  3093  0006D0  A4D8               	btfss	status,2,c
  3094  0006D2  D029               	goto	l1782
  3095  0006D4  D026               	goto	l1780
  3096  0006D6                     l1778:
  3097  0006D6  C02D  F017         	movff	atoi@a,___wmul@multiplier
  3098  0006DA  C02E  F018         	movff	atoi@a+1,___wmul@multiplier+1
  3099  0006DE  0E00               	movlw	0
  3100  0006E0  6E1A               	movwf	___wmul@multiplicand+1,c
  3101  0006E2  0E0A               	movlw	10
  3102  0006E4  6E19               	movwf	___wmul@multiplicand,c
  3103  0006E6  EC09  F008         	call	___wmul	;wreg free
  3104  0006EA  C028  FFF6         	movff	atoi@s,tblptrl
  3105  0006EE  C029  FFF7         	movff	atoi@s+1,tblptrh
  3106  0006F2  6AF8               	clrf	tblptru,c
  3107  0006F4  0E05               	movlw	(high __ramtop+-1)
  3108  0006F6  64F7               	cpfsgt	tblptrh,c
  3109  0006F8  D003               	bra	u1737
  3110  0006FA  0008               	tblrd		*
  3111  0006FC  50F5               	movf	tablat,w,c
  3112  0006FE  D005               	bra	u1730
  3113  000700                     u1737:
  3114  000700  CFF6 FFE9          	movff	tblptrl,fsr0l
  3115  000704  CFF7 FFEA          	movff	tblptrh,fsr0h
  3116  000708  50EF               	movf	indf0,w,c
  3117  00070A                     u1730:
  3118  00070A  6E2A               	movwf	??_atoi& (0+255),c
  3119  00070C  6A2B               	clrf	(??_atoi+1)& (0+255),c
  3120  00070E  5017               	movf	?___wmul,w,c
  3121  000710  262A               	addwf	??_atoi,f,c
  3122  000712  5018               	movf	?___wmul+1,w,c
  3123  000714  222B               	addwfc	??_atoi+1,f,c
  3124  000716  0ED0               	movlw	208
  3125  000718  242A               	addwf	??_atoi,w,c
  3126  00071A  6E2D               	movwf	atoi@a,c
  3127  00071C  0EFF               	movlw	255
  3128  00071E  202B               	addwfc	??_atoi+1,w,c
  3129  000720  6E2E               	movwf	atoi@a+1,c
  3130  000722                     l1780:
  3131  000722  4A28               	infsnz	atoi@s,f,c
  3132  000724  2A29               	incf	atoi@s+1,f,c
  3133  000726                     l1782:
  3134  000726  C028  FFF6         	movff	atoi@s,tblptrl
  3135  00072A  C029  FFF7         	movff	atoi@s+1,tblptrh
  3136  00072E  6AF8               	clrf	tblptru,c
  3137  000730  0E05               	movlw	(high __ramtop+-1)
  3138  000732  64F7               	cpfsgt	tblptrh,c
  3139  000734  D003               	bra	u1747
  3140  000736  0008               	tblrd		*
  3141  000738  50F5               	movf	tablat,w,c
  3142  00073A  D005               	bra	u1740
  3143  00073C                     u1747:
  3144  00073C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3145  000740  CFF7 FFEA          	movff	tblptrh,fsr0h
  3146  000744  50EF               	movf	indf0,w,c
  3147  000746                     u1740:
  3148  000746  EC3D  F008         	call	_isdigit
  3149  00074A  B0D8               	btfsc	status,0,c
  3150  00074C  D7C4               	goto	l1778
  3151  00074E  502C               	movf	atoi@sign,w,c
  3152  000750  B4D8               	btfsc	status,2,c
  3153  000752  D00D               	goto	l363
  3154  000754  C02D  F02A         	movff	atoi@a,??_atoi
  3155  000758  C02E  F02B         	movff	atoi@a+1,??_atoi+1
  3156  00075C  1E2A               	comf	??_atoi,f,c
  3157  00075E  1E2B               	comf	??_atoi+1,f,c
  3158  000760  4A2A               	infsnz	??_atoi,f,c
  3159  000762  2A2B               	incf	??_atoi+1,f,c
  3160  000764  C02A  F028         	movff	??_atoi,?_atoi
  3161  000768  C02B  F029         	movff	??_atoi+1,?_atoi+1
  3162  00076C  0012               	return	
  3163  00076E                     l363:
  3164  00076E  C02D  F028         	movff	atoi@a,?_atoi
  3165  000772  C02E  F029         	movff	atoi@a+1,?_atoi+1
  3166  000776  0012               	return		;funcret
  3167  000778                     __end_of_atoi:
  3168                           	opt stack 0
  3169                           tosu	equ	0xFFF
  3170                           tosh	equ	0xFFE
  3171                           tosl	equ	0xFFD
  3172                           pclath	equ	0xFFA
  3173                           tblptru	equ	0xFF8
  3174                           tblptrh	equ	0xFF7
  3175                           tblptrl	equ	0xFF6
  3176                           tablat	equ	0xFF5
  3177                           prodh	equ	0xFF4
  3178                           prodl	equ	0xFF3
  3179                           intcon	equ	0xFF2
  3180                           indf0	equ	0xFEF
  3181                           postinc0	equ	0xFEE
  3182                           fsr0h	equ	0xFEA
  3183                           fsr0l	equ	0xFE9
  3184                           wreg	equ	0xFE8
  3185                           indf1	equ	0xFE7
  3186                           postinc1	equ	0xFE6
  3187                           postdec1	equ	0xFE5
  3188                           fsr1h	equ	0xFE2
  3189                           fsr1l	equ	0xFE1
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           fsr2h	equ	0xFDA
  3194                           fsr2l	equ	0xFD9
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _isdigit *****************
  3198 ;; Defined at:
  3199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\isdigit.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  c               1    wreg     unsigned char 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  c               1   24[COMRAM] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;		None               void
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3213 ;;      Params:         0       0       0       0       0       0       0
  3214 ;;      Locals:         2       0       0       0       0       0       0
  3215 ;;      Temps:          1       0       0       0       0       0       0
  3216 ;;      Totals:         3       0       0       0       0       0       0
  3217 ;;Total ram usage:        3 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    3
  3220 ;; This function calls:
  3221 ;;		Nothing
  3222 ;; This function is called by:
  3223 ;;		_atoi
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text23
  3228  00107A                     __ptext23:
  3229                           	opt stack 0
  3230  00107A                     _isdigit:
  3231                           	opt stack 23
  3232                           
  3233                           ;incstack = 0
  3234                           ;isdigit@c stored from wreg
  3235  00107A  6E19               	movwf	isdigit@c,c
  3236  00107C  0E00               	movlw	0
  3237  00107E  6E18               	movwf	_isdigit$592,c
  3238  001080  0E3A               	movlw	58
  3239  001082  6019               	cpfslt	isdigit@c,c
  3240  001084  D005               	goto	l1666
  3241  001086  0E2F               	movlw	47
  3242  001088  6419               	cpfsgt	isdigit@c,c
  3243  00108A  D002               	goto	l1666
  3244  00108C  0E01               	movlw	1
  3245  00108E  6E18               	movwf	_isdigit$592,c
  3246  001090                     l1666:
  3247  001090  C018  F017         	movff	_isdigit$592,??_isdigit
  3248  001094  3017               	rrcf	??_isdigit,w,c
  3249  001096  0012               	return	
  3250  001098                     __end_of_isdigit:
  3251                           	opt stack 0
  3252                           tosu	equ	0xFFF
  3253                           tosh	equ	0xFFE
  3254                           tosl	equ	0xFFD
  3255                           pclath	equ	0xFFA
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           prodh	equ	0xFF4
  3261                           prodl	equ	0xFF3
  3262                           intcon	equ	0xFF2
  3263                           indf0	equ	0xFEF
  3264                           postinc0	equ	0xFEE
  3265                           fsr0h	equ	0xFEA
  3266                           fsr0l	equ	0xFE9
  3267                           wreg	equ	0xFE8
  3268                           indf1	equ	0xFE7
  3269                           postinc1	equ	0xFE6
  3270                           postdec1	equ	0xFE5
  3271                           fsr1h	equ	0xFE2
  3272                           fsr1l	equ	0xFE1
  3273                           indf2	equ	0xFDF
  3274                           postinc2	equ	0xFDE
  3275                           postdec2	equ	0xFDD
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function ___wmul *****************
  3281 ;; Defined at:
  3282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;  multiplier      2   22[COMRAM] unsigned int 
  3285 ;;  multiplicand    2   24[COMRAM] unsigned int 
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  product         2   26[COMRAM] unsigned int 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  2   22[COMRAM] unsigned int 
  3290 ;; Registers used:
  3291 ;;		wreg, status,2, status,0, prodl, prodh
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         4       0       0       0       0       0       0
  3298 ;;      Locals:         2       0       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         6       0       0       0       0       0       0
  3301 ;;Total ram usage:        6 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    3
  3304 ;; This function calls:
  3305 ;;		Nothing
  3306 ;; This function is called by:
  3307 ;;		_atoi
  3308 ;; This function uses a non-reentrant model
  3309 ;;
  3310                           
  3311                           	psect	text24
  3312  001012                     __ptext24:
  3313                           	opt stack 0
  3314  001012                     ___wmul:
  3315                           	opt stack 23
  3316                           
  3317                           ;incstack = 0
  3318  001012  5017               	movf	___wmul@multiplier,w,c
  3319  001014  0219               	mulwf	___wmul@multiplicand,c
  3320  001016  CFF3 F01B          	movff	prodl,___wmul@product
  3321  00101A  CFF4 F01C          	movff	prodh,___wmul@product+1
  3322  00101E  5017               	movf	___wmul@multiplier,w,c
  3323  001020  021A               	mulwf	___wmul@multiplicand+1,c
  3324  001022  50F3               	movf	prodl,w,c
  3325  001024  261C               	addwf	___wmul@product+1,f,c
  3326  001026  5018               	movf	___wmul@multiplier+1,w,c
  3327  001028  0219               	mulwf	___wmul@multiplicand,c
  3328  00102A  50F3               	movf	prodl,w,c
  3329  00102C  261C               	addwf	___wmul@product+1,f,c
  3330  00102E  C01B  F017         	movff	___wmul@product,?___wmul
  3331  001032  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  3332  001036  0012               	return	
  3333  001038                     __end_of___wmul:
  3334                           	opt stack 0
  3335                           tosu	equ	0xFFF
  3336                           tosh	equ	0xFFE
  3337                           tosl	equ	0xFFD
  3338                           pclath	equ	0xFFA
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           indf0	equ	0xFEF
  3347                           postinc0	equ	0xFEE
  3348                           fsr0h	equ	0xFEA
  3349                           fsr0l	equ	0xFE9
  3350                           wreg	equ	0xFE8
  3351                           indf1	equ	0xFE7
  3352                           postinc1	equ	0xFE6
  3353                           postdec1	equ	0xFE5
  3354                           fsr1h	equ	0xFE2
  3355                           fsr1l	equ	0xFE1
  3356                           indf2	equ	0xFDF
  3357                           postinc2	equ	0xFDE
  3358                           postdec2	equ	0xFDD
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _ISR *****************
  3364 ;; Defined at:
  3365 ;;		line 66 in file "main.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;		None               void
  3372 ;; Registers used:
  3373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3379 ;;      Params:         0       0       0       0       0       0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0
  3381 ;;      Temps:         14       0       0       0       0       0       0
  3382 ;;      Totals:        14       0       0       0       0       0       0
  3383 ;;Total ram usage:       14 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    2
  3386 ;; This function calls:
  3387 ;;		_esp8266_fillBuffer
  3388 ;; This function is called by:
  3389 ;;		Interrupt level 2
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	intcode
  3394  000008                     __pintcode:
  3395                           	opt stack 0
  3396  000008                     _ISR:
  3397                           	opt stack 22
  3398                           
  3399                           ;incstack = 0
  3400  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3401  00000A  CFFA F009          	movff	pclath,??_ISR
  3402  00000E  CFFB F00A          	movff	pclatu,??_ISR+1
  3403  000012  EDBF  F005         	call	int_func,f	;refresh shadow registers
  3404                           tosu	equ	0xFFF
  3405                           tosh	equ	0xFFE
  3406                           tosl	equ	0xFFD
  3407                           pclatu	equ	0xFFB
  3408                           pclath	equ	0xFFA
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           indf0	equ	0xFEF
  3417                           postinc0	equ	0xFEE
  3418                           fsr0h	equ	0xFEA
  3419                           fsr0l	equ	0xFE9
  3420                           wreg	equ	0xFE8
  3421                           indf1	equ	0xFE7
  3422                           postinc1	equ	0xFE6
  3423                           postdec1	equ	0xFE5
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433                           	psect	intcode_body
  3434  000B7E                     __pintcode_body:
  3435                           	opt stack 22
  3436  000B7E                     int_func:
  3437                           	opt stack 22
  3438  000B7E  0006               	pop		; remove dummy address from shadow register refresh
  3439  000B80  CFE9 F00B          	movff	fsr0l,??_ISR+2
  3440  000B84  CFEA F00C          	movff	fsr0h,??_ISR+3
  3441  000B88  CFE1 F00D          	movff	fsr1l,??_ISR+4
  3442  000B8C  CFE2 F00E          	movff	fsr1h,??_ISR+5
  3443  000B90  CFD9 F00F          	movff	fsr2l,??_ISR+6
  3444  000B94  CFDA F010          	movff	fsr2h,??_ISR+7
  3445  000B98  CFF3 F011          	movff	prodl,??_ISR+8
  3446  000B9C  CFF4 F012          	movff	prodh,??_ISR+9
  3447  000BA0  CFF6 F013          	movff	tblptrl,??_ISR+10
  3448  000BA4  CFF7 F014          	movff	tblptrh,??_ISR+11
  3449  000BA8  CFF8 F015          	movff	tblptru,??_ISR+12
  3450  000BAC  CFF5 F016          	movff	tablat,??_ISR+13
  3451                           
  3452                           ;main.c: 68: if(RCIF) {
  3453  000BB0  AA9E               	btfss	3998,5,c	;volatile
  3454  000BB2  D00C               	goto	i2l39
  3455                           
  3456                           ;main.c: 70: if(OERR) {
  3457  000BB4  A2AB               	btfss	4011,1,c	;volatile
  3458  000BB6  D002               	goto	i2l36
  3459                           
  3460                           ;main.c: 72: CREN=0;
  3461  000BB8  98AB               	bcf	4011,4,c	;volatile
  3462                           
  3463                           ;main.c: 73: CREN=1;
  3464  000BBA  88AB               	bsf	4011,4,c	;volatile
  3465  000BBC                     i2l36:
  3466                           
  3467                           ;main.c: 74: }
  3468                           ;main.c: 77: if(FERR) {
  3469  000BBC  A4AB               	btfss	4011,2,c	;volatile
  3470  000BBE  D003               	goto	i2l1606
  3471                           
  3472                           ;main.c: 79: RCREG=RCREG;
  3473  000BC0  CFAE FFAE          	movff	4014,4014	;volatile
  3474                           
  3475                           ;main.c: 80: }
  3476  000BC4  D003               	goto	i2l39
  3477  000BC6                     i2l1606:
  3478                           
  3479                           ;main.c: 81: else {
  3480                           ;main.c: 82: esp8266_fillBuffer(RCREG);
  3481  000BC6  50AE               	movf	4014,w,c	;volatile
  3482  000BC8  EC8A  F008         	call	_esp8266_fillBuffer
  3483  000BCC                     i2l39:
  3484  000BCC  C016  FFF5         	movff	??_ISR+13,tablat
  3485  000BD0  C015  FFF8         	movff	??_ISR+12,tblptru
  3486  000BD4  C014  FFF7         	movff	??_ISR+11,tblptrh
  3487  000BD8  C013  FFF6         	movff	??_ISR+10,tblptrl
  3488  000BDC  C012  FFF4         	movff	??_ISR+9,prodh
  3489  000BE0  C011  FFF3         	movff	??_ISR+8,prodl
  3490  000BE4  C010  FFDA         	movff	??_ISR+7,fsr2h
  3491  000BE8  C00F  FFD9         	movff	??_ISR+6,fsr2l
  3492  000BEC  C00E  FFE2         	movff	??_ISR+5,fsr1h
  3493  000BF0  C00D  FFE1         	movff	??_ISR+4,fsr1l
  3494  000BF4  C00C  FFEA         	movff	??_ISR+3,fsr0h
  3495  000BF8  C00B  FFE9         	movff	??_ISR+2,fsr0l
  3496  000BFC  C00A  FFFB         	movff	??_ISR+1,pclatu
  3497  000C00  C009  FFFA         	movff	??_ISR,pclath
  3498  000C04  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3499  000C06  0011               	retfie		f
  3500  000C08                     __end_of_ISR:
  3501                           	opt stack 0
  3502                           tosu	equ	0xFFF
  3503                           tosh	equ	0xFFE
  3504                           tosl	equ	0xFFD
  3505                           pclatu	equ	0xFFB
  3506                           pclath	equ	0xFFA
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           prodh	equ	0xFF4
  3512                           prodl	equ	0xFF3
  3513                           intcon	equ	0xFF2
  3514                           indf0	equ	0xFEF
  3515                           postinc0	equ	0xFEE
  3516                           fsr0h	equ	0xFEA
  3517                           fsr0l	equ	0xFE9
  3518                           wreg	equ	0xFE8
  3519                           indf1	equ	0xFE7
  3520                           postinc1	equ	0xFE6
  3521                           postdec1	equ	0xFE5
  3522                           fsr1h	equ	0xFE2
  3523                           fsr1l	equ	0xFE1
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           fsr2h	equ	0xFDA
  3528                           fsr2l	equ	0xFD9
  3529                           status	equ	0xFD8
  3530                           
  3531 ;; *************** function _esp8266_fillBuffer *****************
  3532 ;; Defined at:
  3533 ;;		line 44 in file "esp8266.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  c               1    wreg     unsigned char 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  c               1    7[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;		None               void
  3540 ;; Registers used:
  3541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3547 ;;      Params:         0       0       0       0       0       0       0
  3548 ;;      Locals:         1       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0
  3550 ;;      Totals:         1       0       0       0       0       0       0
  3551 ;;Total ram usage:        1 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    1
  3554 ;; This function calls:
  3555 ;;		_circBufPush
  3556 ;; This function is called by:
  3557 ;;		_ISR
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text26
  3562  001114                     __ptext26:
  3563                           	opt stack 0
  3564  001114                     _esp8266_fillBuffer:
  3565                           	opt stack 22
  3566                           
  3567                           ;incstack = 0
  3568                           ;esp8266_fillBuffer@c stored from wreg
  3569  001114  6E08               	movwf	esp8266_fillBuffer@c,c
  3570                           
  3571                           ;esp8266.c: 45: circBufPush(&receiveBuffer, c);
  3572  001116  0E37               	movlw	low _receiveBuffer
  3573  001118  6E01               	movwf	circBufPush@c,c
  3574  00111A  0E00               	movlw	high _receiveBuffer
  3575  00111C  6E02               	movwf	circBufPush@c+1,c
  3576  00111E  C008  F003         	movff	esp8266_fillBuffer@c,circBufPush@data
  3577  001122  EC04  F006         	call	_circBufPush	;wreg free
  3578  001126  0012               	return		;funcret
  3579  001128                     __end_of_esp8266_fillBuffer:
  3580                           	opt stack 0
  3581                           tosu	equ	0xFFF
  3582                           tosh	equ	0xFFE
  3583                           tosl	equ	0xFFD
  3584                           pclatu	equ	0xFFB
  3585                           pclath	equ	0xFFA
  3586                           tblptru	equ	0xFF8
  3587                           tblptrh	equ	0xFF7
  3588                           tblptrl	equ	0xFF6
  3589                           tablat	equ	0xFF5
  3590                           prodh	equ	0xFF4
  3591                           prodl	equ	0xFF3
  3592                           intcon	equ	0xFF2
  3593                           indf0	equ	0xFEF
  3594                           postinc0	equ	0xFEE
  3595                           fsr0h	equ	0xFEA
  3596                           fsr0l	equ	0xFE9
  3597                           wreg	equ	0xFE8
  3598                           indf1	equ	0xFE7
  3599                           postinc1	equ	0xFE6
  3600                           postdec1	equ	0xFE5
  3601                           fsr1h	equ	0xFE2
  3602                           fsr1l	equ	0xFE1
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _circBufPush *****************
  3611 ;; Defined at:
  3612 ;;		line 5 in file "circBuf.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  c               2    0[COMRAM] PTR volatile struct .
  3615 ;;		 -> receiveBuffer(5), 
  3616 ;;  data            1    2[COMRAM] unsigned char 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  next            1    6[COMRAM] unsigned char 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3628 ;;      Params:         3       0       0       0       0       0       0
  3629 ;;      Locals:         1       0       0       0       0       0       0
  3630 ;;      Temps:          3       0       0       0       0       0       0
  3631 ;;      Totals:         7       0       0       0       0       0       0
  3632 ;;Total ram usage:        7 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; This function calls:
  3635 ;;		Nothing
  3636 ;; This function is called by:
  3637 ;;		_esp8266_fillBuffer
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text27
  3642  000C08                     __ptext27:
  3643                           	opt stack 0
  3644  000C08                     _circBufPush:
  3645                           	opt stack 22
  3646                           
  3647                           ;circBuf.c: 7: unsigned char next = c->head + 1;
  3648                           
  3649                           ;incstack = 0
  3650  000C08  EE20 F002          	lfsr	2,2
  3651  000C0C  5001               	movf	circBufPush@c,w,c
  3652  000C0E  26D9               	addwf	fsr2l,f,c
  3653  000C10  5002               	movf	circBufPush@c+1,w,c
  3654  000C12  22DA               	addwfc	fsr2h,f,c
  3655  000C14  50DF               	movf	indf2,w,c
  3656  000C16  6E04               	movwf	??_circBufPush& (0+255),c
  3657  000C18  2804               	incf	??_circBufPush,w,c
  3658  000C1A  6E07               	movwf	circBufPush@next,c
  3659                           
  3660                           ;circBuf.c: 8: if (next >= c->maxLen)
  3661  000C1C  EE20 F004          	lfsr	2,4
  3662  000C20  5001               	movf	circBufPush@c,w,c
  3663  000C22  26D9               	addwf	fsr2l,f,c
  3664  000C24  5002               	movf	circBufPush@c+1,w,c
  3665  000C26  22DA               	addwfc	fsr2h,f,c
  3666  000C28  50DE               	movf	postinc2,w,c
  3667  000C2A  5C07               	subwf	circBufPush@next,w,c
  3668  000C2C  A0D8               	btfss	status,0,c
  3669  000C2E  D002               	goto	i2l1540
  3670                           
  3671                           ;circBuf.c: 9: next = 0;
  3672  000C30  0E00               	movlw	0
  3673  000C32  6E07               	movwf	circBufPush@next,c
  3674  000C34                     i2l1540:
  3675                           
  3676                           ;circBuf.c: 12: if (next == c->tail)
  3677  000C34  EE20 F003          	lfsr	2,3
  3678  000C38  5001               	movf	circBufPush@c,w,c
  3679  000C3A  26D9               	addwf	fsr2l,f,c
  3680  000C3C  5002               	movf	circBufPush@c+1,w,c
  3681  000C3E  22DA               	addwfc	fsr2h,f,c
  3682  000C40  5007               	movf	circBufPush@next,w,c
  3683  000C42  18DE               	xorwf	postinc2,w,c
  3684  000C44  B4D8               	btfsc	status,2,c
  3685  000C46  0012               	return	
  3686                           
  3687                           ;circBuf.c: 15: c->buffer[c->head] = data;
  3688                           
  3689                           ;circBuf.c: 13: return 0;
  3690                           ;	Return value of _circBufPush is never used
  3691  000C48  EE20 F002          	lfsr	2,2
  3692  000C4C  5001               	movf	circBufPush@c,w,c
  3693  000C4E  26D9               	addwf	fsr2l,f,c
  3694  000C50  5002               	movf	circBufPush@c+1,w,c
  3695  000C52  22DA               	addwfc	fsr2h,f,c
  3696  000C54  50DF               	movf	indf2,w,c
  3697  000C56  6E04               	movwf	??_circBufPush& (0+255),c
  3698  000C58  5004               	movf	??_circBufPush,w,c
  3699  000C5A  0D01               	mullw	1
  3700  000C5C  C001  FFD9         	movff	circBufPush@c,fsr2l
  3701  000C60  C002  FFDA         	movff	circBufPush@c+1,fsr2h
  3702  000C64  CFDE F005          	movff	postinc2,??_circBufPush+1
  3703  000C68  CFDD F006          	movff	postdec2,??_circBufPush+2
  3704  000C6C  50F3               	movf	prodl,w,c
  3705  000C6E  2405               	addwf	??_circBufPush+1,w,c
  3706  000C70  6ED9               	movwf	fsr2l,c
  3707  000C72  50F4               	movf	prodh,w,c
  3708  000C74  2006               	addwfc	??_circBufPush+2,w,c
  3709  000C76  6EDA               	movwf	fsr2h,c
  3710  000C78  C003  FFDF         	movff	circBufPush@data,indf2
  3711                           
  3712                           ;circBuf.c: 16: c->head = next;
  3713  000C7C  EE20 F002          	lfsr	2,2
  3714  000C80  5001               	movf	circBufPush@c,w,c
  3715  000C82  26D9               	addwf	fsr2l,f,c
  3716  000C84  5002               	movf	circBufPush@c+1,w,c
  3717  000C86  22DA               	addwfc	fsr2h,f,c
  3718  000C88  C007  FFDF         	movff	circBufPush@next,indf2
  3719  000C8C  0012               	return	
  3720  000C8E                     __end_of_circBufPush:
  3721                           	opt stack 0
  3722                           tosu	equ	0xFFF
  3723                           tosh	equ	0xFFE
  3724                           tosl	equ	0xFFD
  3725                           pclatu	equ	0xFFB
  3726                           pclath	equ	0xFFA
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           indf0	equ	0xFEF
  3735                           postinc0	equ	0xFEE
  3736                           fsr0h	equ	0xFEA
  3737                           fsr0l	equ	0xFE9
  3738                           wreg	equ	0xFE8
  3739                           indf1	equ	0xFE7
  3740                           postinc1	equ	0xFE6
  3741                           postdec1	equ	0xFE5
  3742                           fsr1h	equ	0xFE2
  3743                           fsr1l	equ	0xFE1
  3744                           indf2	equ	0xFDF
  3745                           postinc2	equ	0xFDE
  3746                           postdec2	equ	0xFDD
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           tosu	equ	0xFFF
  3751                           tosh	equ	0xFFE
  3752                           tosl	equ	0xFFD
  3753                           pclatu	equ	0xFFB
  3754                           pclath	equ	0xFFA
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           indf0	equ	0xFEF
  3763                           postinc0	equ	0xFEE
  3764                           fsr0h	equ	0xFEA
  3765                           fsr0l	equ	0xFE9
  3766                           wreg	equ	0xFE8
  3767                           indf1	equ	0xFE7
  3768                           postinc1	equ	0xFE6
  3769                           postdec1	equ	0xFE5
  3770                           fsr1h	equ	0xFE2
  3771                           fsr1l	equ	0xFE1
  3772                           indf2	equ	0xFDF
  3773                           postinc2	equ	0xFDE
  3774                           postdec2	equ	0xFDD
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779                           	psect	text28
  3780  000000                     __ptext28:
  3781                           	opt stack 0
  3782                           tosu	equ	0xFFF
  3783                           tosh	equ	0xFFE
  3784                           tosl	equ	0xFFD
  3785                           pclatu	equ	0xFFB
  3786                           pclath	equ	0xFFA
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           indf0	equ	0xFEF
  3795                           postinc0	equ	0xFEE
  3796                           fsr0h	equ	0xFEA
  3797                           fsr0l	equ	0xFE9
  3798                           wreg	equ	0xFE8
  3799                           indf1	equ	0xFE7
  3800                           postinc1	equ	0xFE6
  3801                           postdec1	equ	0xFE5
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811                           	psect	rparam
  3812  0000                     tosu	equ	0xFFF
  3813                           tosh	equ	0xFFE
  3814                           tosl	equ	0xFFD
  3815                           pclatu	equ	0xFFB
  3816                           pclath	equ	0xFFA
  3817                           tblptru	equ	0xFF8
  3818                           tblptrh	equ	0xFF7
  3819                           tblptrl	equ	0xFF6
  3820                           tablat	equ	0xFF5
  3821                           prodh	equ	0xFF4
  3822                           prodl	equ	0xFF3
  3823                           intcon	equ	0xFF2
  3824                           indf0	equ	0xFEF
  3825                           postinc0	equ	0xFEE
  3826                           fsr0h	equ	0xFEA
  3827                           fsr0l	equ	0xFE9
  3828                           wreg	equ	0xFE8
  3829                           indf1	equ	0xFE7
  3830                           postinc1	equ	0xFE6
  3831                           postdec1	equ	0xFE5
  3832                           fsr1h	equ	0xFE2
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           postinc2	equ	0xFDE
  3836                           postdec2	equ	0xFDD
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841                           	psect	temp
  3842  00003F                     btemp:
  3843                           	opt stack 0
  3844  00003F                     	ds	1
  3845  0000                     int$flags	set	btemp
  3846                           tosu	equ	0xFFF
  3847                           tosh	equ	0xFFE
  3848                           tosl	equ	0xFFD
  3849                           pclatu	equ	0xFFB
  3850                           pclath	equ	0xFFA
  3851                           tblptru	equ	0xFF8
  3852                           tblptrh	equ	0xFF7
  3853                           tblptrl	equ	0xFF6
  3854                           tablat	equ	0xFF5
  3855                           prodh	equ	0xFF4
  3856                           prodl	equ	0xFF3
  3857                           intcon	equ	0xFF2
  3858                           indf0	equ	0xFEF
  3859                           postinc0	equ	0xFEE
  3860                           fsr0h	equ	0xFEA
  3861                           fsr0l	equ	0xFE9
  3862                           wreg	equ	0xFE8
  3863                           indf1	equ	0xFE7
  3864                           postinc1	equ	0xFE6
  3865                           postdec1	equ	0xFE5
  3866                           fsr1h	equ	0xFE2
  3867                           fsr1l	equ	0xFE1
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           fsr2h	equ	0xFDA
  3872                           fsr2l	equ	0xFD9
  3873                           status	equ	0xFD8


Data Sizes:
    Strings     35
    Constant    0
    Data        5
    BSS         375
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     54      62
    BANK0           128     50      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Absolute function$0	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), 

    lineProcessor$0	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 340
		 -> accessPoints(BIGRAM[340]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 340
		 -> accessPoints(BIGRAM[340]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_8(CODE[6]), STR_7(CODE[3]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    circBufPop@data	PTR unsigned char  size(2) Largest target is 1
		 -> getch@c(COMRAM[1]), 

    circBufPop@c.buffer	const PTR unsigned char  size(2) Largest target is 32
		 -> receiveBuffer_space(BANK0[32]), 

    circBufPop@c	PTR volatile struct . size(2) Largest target is 6
		 -> receiveBuffer(COMRAM[5]), 

    circBufPush@c.buffer	const PTR unsigned char  size(2) Largest target is 32
		 -> receiveBuffer_space(BANK0[32]), 

    circBufPush@c	PTR volatile struct . size(2) Largest target is 6
		 -> receiveBuffer(COMRAM[5]), 

    readLine@line	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), 

    writeLine@line	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 

    performCommand@lineProcessor	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 0
		 -> processAccessPointLine(), Absolute function(), 

    performCommand@cmd	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[3]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 340
		 -> accessPoints(BIGRAM[340]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    processAccessPointLine@line	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), 

    processAccessPointLine@parsedData	PTR unsigned char  size(2) Largest target is 50
		 -> performCommand@line(BANK0[50]), STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[2]), 
		 -> NULL(NULL[0]), 

    S198$buffer	const PTR unsigned char  size(2) Largest target is 32
		 -> receiveBuffer_space(BANK0[32]), 

    receiveBuffer.buffer	const PTR unsigned char  size(2) Largest target is 32
		 -> receiveBuffer_space(BANK0[32]), 


Critical Paths under _main in COMRAM

    _setup->_msdelay
    _esp8266_listAp->_performCommand
    _esp8266_isOnline->_performCommand
    _performCommand->_processAccessPointLine
    _writeLine->_putch
    _readLine->_getch
    _getch->_circBufPop
    _processAccessPointLine->_atoi
    _strtok->_strcspn
    _strtok->_strspn
    _strspn->_strchr
    _strcspn->_strchr
    _strstr->_strncmp
    _strncmp->_strlen
    _strcpy->_strtok
    _atoi->_strtok

Critical Paths under _ISR in COMRAM

    _ISR->_esp8266_fillBuffer
    _esp8266_fillBuffer->_circBufPush

Critical Paths under _main in BANK0

    _esp8266_listAp->_performCommand
    _esp8266_isOnline->_performCommand

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15321
                   _esp8266_isOnline
                     _esp8266_listAp
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      87
                       _esp8266_init
                            _msdelay
 ---------------------------------------------------------------------------------
 (2) _msdelay                                              3     1      2      87
                                             22 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _esp8266_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _esp8266_listAp                                       0     0      0    7617
                     _performCommand
 ---------------------------------------------------------------------------------
 (1) _esp8266_isOnline                                     0     0      0    7617
                     _performCommand
 ---------------------------------------------------------------------------------
 (2) _performCommand                                      54    50      4    7617
                                             50 COMRAM     4     0      4
                                              0 BANK0     50    50      0
                   Absolute function *
             _processAccessPointLine *
                           _readLine
                             _strcmp
                          _writeLine
 ---------------------------------------------------------------------------------
 (3) _writeLine                                            2     0      2     164
                                             23 COMRAM     2     0      2
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               6     2      4     441
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readLine                                             4     2      2     903
                                             31 COMRAM     4     2      2
                              _getch
 ---------------------------------------------------------------------------------
 (4) _getch                                                1     1      0     600
                                             30 COMRAM     1     1      0
                         _circBufPop
 ---------------------------------------------------------------------------------
 (5) _circBufPop                                           8     4      4     532
                                             22 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _processAccessPointLine                               4     2      2    5503
                                             46 COMRAM     4     2      2
                               _atoi
                             _strcpy
                             _strstr
                             _strtok
 ---------------------------------------------------------------------------------
 (4) _strtok                                               4     0      4    2493
                                             35 COMRAM     4     0      4
                            _strcspn
                             _strspn
 ---------------------------------------------------------------------------------
 (5) _strspn                                               7     3      4     873
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (5) _strcspn                                              7     3      4     873
                                             28 COMRAM     7     3      4
                             _strchr
 ---------------------------------------------------------------------------------
 (4) _strstr                                               4     0      4    1621
                                             37 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (5) _strncmp                                              9     3      6     423
                                             28 COMRAM     9     3      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     207
                                             22 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               6     2      4     586
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     2      4     263
                                             39 COMRAM     6     2      4
                             _strtok (ARG)
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2     973
                                             39 COMRAM     7     5      2
                             ___wmul
                            _isdigit
                             _strtok (ARG)
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     386
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               2     0      2       0
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 14    14      0     372
                                              8 COMRAM    14    14      0
                 _esp8266_fillBuffer
 ---------------------------------------------------------------------------------
 (8) _esp8266_fillBuffer                                   1     1      0     372
                                              7 COMRAM     1     1      0
                        _circBufPush
 ---------------------------------------------------------------------------------
 (9) _circBufPush                                          7     4      3     350
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _esp8266_isOnline
     _performCommand
       Absolute function(Fake) *
       _processAccessPointLine *
         _atoi
           ___wmul
           _isdigit
           _strtok (ARG)
             _strcspn
               _strchr
             _strspn
               _strchr
         _strcpy
           _strtok (ARG)
             _strcspn
               _strchr
             _strspn
               _strchr
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _readLine *
         _getch
           _circBufPop
       _strcmp *
       _writeLine *
         _putch
   _esp8266_listAp
     _performCommand
       Absolute function(Fake) *
       _processAccessPointLine *
         _atoi
           ___wmul
           _isdigit
           _strtok (ARG)
             _strcspn
               _strchr
             _strspn
               _strchr
         _strcpy
           _strtok (ARG)
             _strcspn
               _strchr
             _strspn
               _strchr
         _strstr
           _strchr
           _strlen
           _strncmp
             _strlen (ARG)
         _strtok
           _strcspn
             _strchr
           _strspn
             _strchr
       _readLine *
         _getch
           _circBufPop
       _strcmp *
       _writeLine *
         _putch
   _setup
     _esp8266_init
     _msdelay

 _ISR (ROOT)
   _esp8266_fillBuffer
     _circBufPush

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     154      17       22.1%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     32      52       5       64.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     36      3E       1       49.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90      15        0.0%
DATA                 0      0     1E4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Sep 29 22:06:00 2015

                              l46 1112               ___wmul@multiplicand 0019  
                     __CFG_BORV$3 000000                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                       __CFG_OSC$HS 000000  
                             l171 112A                               l363 076E  
                             l832 0E00                               l857 0D82  
                             l793 0788                               l798 0866  
                             _GIE 007F97                      __CFG_CPB$OFF 000000  
                    __CFG_CPD$OFF 000000                               _ISR 0008  
                             _RX9 007D5E                               _TX9 007D66  
                             prod 000FF3                               tosl 000FFD  
                             wreg 000FE8                    circBufPop@data 0019  
                  circBufPop@next 001E                      __CFG_LVP$OFF 000000  
                 ?_esp8266_listAp 0001                              ?_ISR 0001  
                    __CFG_WDT$OFF 000000                              l1700 0D18  
                            l1532 105A                              l1710 0D9E  
                            l1702 0D20                              l1624 0E3A  
                            l1800 1098                              l1618 0E0A  
                            l1722 0B1E                              l1716 0AE4  
                            l1724 0B46                              l1708 0D96  
                            l1740 079A                              l1636 096C  
                            l1646 0A08                              l1672 0FA8  
                            l1728 0B74                              l1824 0FDE  
                            l1666 1090                              l1762 0628  
                            l1674 0FAC                              l1690 0AC0  
                            l1682 0A1E                              l1834 0F16  
                            l1906 1104                              l1780 0722  
                            l1764 062C                              l1692 0AC8  
                            l1756 085E                              l1748 07EE  
                            l1852 0ECC                              l1828 0FF2  
                            l1782 0726                              l1774 06AE  
                            l1790 0F64                              l1686 0A78  
                            l1846 0F42                              l1854 0ED4  
                            l1792 0F6C                              l1848 0F56  
                            l1864 0C9A                              l1778 06D6  
                            l1858 0F06                              l1882 0CE6  
                            l1874 0CC6                              STR_1 061F  
                            STR_2 060A                              STR_3 0601  
                            STR_4 0622                              STR_5 0619  
                            STR_6 0622                              STR_7 061C  
                            STR_8 0613                              _BRGH 007D62  
                            _CREN 007D5C                              _FERR 007D5A  
                            u1320 0E2A                              u1410 0A3E  
                            u1340 0E66                              u1500 0DBE  
                            u1327 0E20                              u1440 0AB0  
                            u1520 0DEC                              u1600 07D6  
                            u1417 0A34                              u1347 0E5C  
                            u1435 0A72                              u1507 0DB4  
                            u1460 0D40                              u1620 082E  
                            u1437 0A68                              u1710 06CE  
                            u1447 0AA6                              u1527 0DE2  
                            u1607 07CC                              u1560 0B6E  
                            u1480 0D6E                              u1640 0858  
                            u1730 070A                              u1650 064C  
                            u1467 0D36                              u1627 0824  
                            u1740 0746                              u1717 06C4  
                            u1670 0672                              u1567 0B64  
                            u1487 0D64                              u1647 084C  
                            u1737 0700                              u1657 0642  
                            u1690 06A4                              u1770 0F94  
                            u1747 073C                              u1908 0CFA  
                            u1677 0668                              u1927 1066  
                            u1697 069A                              u1777 0F8A  
                            _PEIE 007F96                              _RCIE 007CED  
                            _RCIF 007CF5                              i2l36 0BBC  
                            i2l39 0BCC                              _OERR 007D59  
                            _SPEN 007D5F                              _SREN 007D5D  
                            _TXIE 007CEC                              _TXIF 007CF4  
                            _TXEN 007D65                              _SYNC 007D64  
                            _atoi 0626                              _main 10FE  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              btemp 003F  
                            pclat 000FFA                              prodh 000FF4  
                            prodl 000FF3                              start 0016  
                   __CFG_IESO$OFF 000000                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000010                   readLine@charCnt 0022  
                           ??_ISR 0009          ??_processAccessPointLine 0031  
                           ?_atoi 0028                             ?_main 0001  
                           _BRG16 007DC3                   circBufPush@data 0003  
                           _RCREG 000FAE                             _SPBRG 000FAF  
                 circBufPush@next 0007                             _TXREG 000FAD  
                   __CFG_PWRT$OFF 000000                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBTR1$OFF 000000  
                  __CFG_EBTR2$OFF 000000                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                             _getch 1098  
                 __end_of_isdigit 1098                             atoi@a 002D  
                           _setup 10CE                             atoi@s 0028  
                           _putch 1128                   __end_of_msdelay 107A  
                           pclath 000FFA                             tablat 000FF5  
                           status 000FD8                   __end_of_strcspn 0E0A  
                 __end_of_strncmp 0AE2                      _accessPoints 00D2  
                  __CFG_PBADEN$ON 000000              __size_of_circBufPush 0086  
                 __initialization 0E76                      __end_of_atoi 0778  
                    __end_of_main 1114                 ?_esp8266_isOnline 0001  
                          ??_atoi 002A                            ??_main 0037  
              ??_esp8266_isOnline 0037                     __activetblptr 000002  
                  _performCommand 0C8E        processAccessPointLine@line 002F  
                          ?_getch 0001                            ?_setup 0001  
                          ?_putch 0001             __size_of_esp8266_init 0022  
                          i2l1540 0C34                            i2l1606 0BC6  
                          _TRISC6 007CA6                            _TRISC7 007CA7  
                  __CFG_XINST$OFF 000000                            ___wmul 1012  
                  __CFG_STVREN$ON 000000                  __end_of_readLine 0F5A  
 __size_of_processAccessPointLine 00D8                            clear_0 0E7E  
                          clear_1 0E90                            getch@c 001F  
          __end_of_performCommand 0D0E                            _strchr 0E0A  
                          _strcmp 0ECA                            _strcpy 0F5A  
                          _strlen 0F9E                            _strtok 0778  
                          _strspn 0D0E                            _strstr 0AE2  
                    __pdataCOMRAM 0037                         ??_isdigit 0017  
                    _esp8266_init 1038              _amountOfAccessPoints 003E  
                       ??_msdelay 0019                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                            putch@c 0017  
                       ??_strcspn 0021                         ??_strncmp 0023  
                      __accesstop 0080           __end_of__initialization 0EBC  
      __end_of_esp8266_fillBuffer 1128                     ___rparam_used 000001  
                  __pcstackCOMRAM 0001                     __end_of_getch 10B4  
                   __end_of_setup 10E6                     __end_of_putch 1134  
     performCommand@lineProcessor 0035                   ?_performCommand 0033  
                ??_esp8266_listAp 0037                           ??_getch 001F  
                         ??_setup 001A            _processAccessPointLine 0870  
                         ??_putch 0017                        __pbssBANK0 00B2  
                      _circBufPop 0948                           ?___wmul 0017  
                         ?_strchr 0017                           ?_strcmp 0017  
                         ?_strcpy 0028                           ?_strlen 0017  
                         ?_strtok 0024                           ?_strspn 001D  
                         ?_strstr 0026               _receiveBuffer_space 00B2  
                       ?_readLine 0020                      readLine@line 0020  
              __size_of_writeLine 0036                           __Hparam 0000  
                         __Lparam 0000                   __size_of___wmul 0026  
                    __psmallconst 0600                           __pcinit 0E76  
                         __ramtop 0600                           __ptext0 10FE  
                         __ptext1 10CE                           __ptext2 105A  
                         __ptext3 1038                           __ptext4 10B4  
                         __ptext5 10E6                           __ptext6 0C8E  
                         __ptext7 0FDC                           __ptext8 1128  
                         __ptext9 0ECA                   __size_of_strchr 006C  
                 __size_of_strcmp 0048                   __size_of_strcpy 0044  
                 __size_of_strlen 003E                      __size_of_ISR 0C00  
                 __size_of_strtok 00F8                   __size_of_strspn 007E  
                 __size_of_strstr 009C                           _isdigit 107A  
                   _receiveBuffer 0037                           _msdelay 105A  
                         _strcspn 0D8C                           _strncmp 0A1C  
                  __pintcode_body 0B7E              end_of_initialization 0EBC  
       __size_of_esp8266_isOnline 0018                        ??_readLine 0022  
                   __Lmediumconst 0000                           int_func 0B7E  
                   ??_circBufPush 0004                       ?_circBufPop 0017  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE               esp8266_fillBuffer@c 0008  
                         strcmp@r 001C                           strlen@s 0017  
                         strspn@i 0022                 __end_of_writeLine 1012  
                       _TRISAbits 000F92                  ??_performCommand 0037  
             __end_of_circBufPush 0C8E                    __end_of___wmul 1038  
              _esp8266_fillBuffer 1114                     __pidataCOMRAM 1134  
                  __end_of_strchr 0E76                    __end_of_strcmp 0F12  
                  __end_of_strcpy 0F9E                    __end_of_strlen 0FDC  
                  __end_of_strtok 0870                    __end_of_strspn 0D8C  
                  __end_of_strstr 0B7E               start_initialization 0E76  
             ?_esp8266_fillBuffer 0001           ?_processAccessPointLine 002F  
                     __end_of_ISR 0C08               __size_of_circBufPop 00D4  
            ??_esp8266_fillBuffer 0008                          ??___wmul 001B  
                __CFG_LPT1OSC$OFF 000000                          ??_strchr 001B  
                        ??_strcmp 001B                          ??_strcpy 002C  
                        ??_strlen 0019                          ??_strtok 0028  
                        ??_strspn 0021                          ??_strstr 002A  
  __end_of_processAccessPointLine 0948                       __pbssBIGRAM 00D2  
                     __pbssCOMRAM 003C                     __pcstackBANK0 0080  
                _esp8266_isOnline 10E6                       _circBufPush 0C08  
               __size_of_readLine 0048  processAccessPointLine@parsedData 0031  
               __CFG_CCP2MX$PORTC 000000                         __pintcode 0008  
                     __smallconst 0600                          ?_isdigit 0001  
                        ?_msdelay 0017                    __size_of_getch 001C  
                        ?_strcspn 001D                          ?_strncmp 001D  
                  __size_of_setup 0018                    __size_of_putch 000C  
         __size_of_esp8266_listAp 001A                    ___wmul@product 001B  
                        _LATAbits 000F89                      ??_circBufPop 001B  
                __CFG_WDTPS$32768 000000                 ___wmul@multiplier 0017  
                   ?_esp8266_init 0001                      circBufPush@c 0001  
              __end_of_circBufPop 0A1C                         _writeLine 0FDC  
              performCommand@line 0080                         copy_data0 0EB0  
                        __Hrparam 0000                         readLine@c 0023  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
                     _isdigit$592 0018                    ??_esp8266_init 0017  
                __size_of_isdigit 001E                  __size_of_msdelay 0020  
                        __ptext10 0F12                          __ptext11 1098  
                        __ptext20 0E0A                          __ptext12 0948  
                        __ptext21 0F5A                          __ptext13 0870  
                        __ptext22 0626                          __ptext14 0778  
                        __ptext23 107A                          __ptext15 0D0E  
                        __ptext24 1012                          __ptext16 0D8C  
                        __ptext17 0AE2                          __ptext26 1114  
                        __ptext18 0A1C                          __ptext27 0C08  
                        __ptext19 0F9E                          __ptext28 0000  
                      ?_writeLine 0018                  __size_of_strcspn 007E  
                __size_of_strncmp 00C6                        strcpy@from 002A  
                        _readLine 0F12                     __size_of_atoi 0152  
                   __size_of_main 0016                        strncmp@len 0021  
                        int$flags 003F                          atoi@sign 002C  
        __end_of_esp8266_isOnline 10FE                       circBufPop@c 0017  
               performCommand@cmd 0033                          isdigit@c 0019  
                        intlevel2 0000                    _esp8266_listAp 10B4  
                       strchr@chr 0019                         strchr@ptr 0017  
                        msdelay@b 0017                      ?_circBufPush 0001  
                       strcspn@s1 001D                         strcspn@s2 001F  
                       strncmp@s1 001D                         strncmp@s2 001F  
     __size_of_esp8266_fillBuffer 0014                          strcmp@s1 0017  
                        strcmp@s2 0019                          strcpy@cp 002C  
                        strlen@cp 001B                          strcpy@to 0028  
                        strcspn@i 0022           __size_of_performCommand 0080  
                   writeLine@line 0018                          strtok@s1 0024  
                        strtok@s2 0026                          strspn@s1 001D  
                        strspn@s2 001F                          strtok@sp 003C  
                        strstr@s1 0026                          strstr@s2 0028  
                     ??_writeLine 001A            __end_of_esp8266_listAp 10CE  
            __end_of_esp8266_init 105A  
